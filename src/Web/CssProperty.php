<?php

/**
 * @noinspection PhpUnused
 * @noinspection PhpConstantNamingConventionInspection
 * @noinspection PhpClassNamingConventionInspection
 */

namespace TomLutzenberger\Constantine\Web;

/**
 * Collection of CSS properties
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#index
 *
 * @package   TomLutzenberger\Constantine\Web
 * @copyright 2021-2022 Tom Lutzenberger
 * @author    Tom Lutzenberger <lutzenbergerthomas@gmail.com>
 * @license   MIT
 * @link      https://tomlutzenberger.de
 */
class CssProperty
{
    /**
     * CSS property 'accent-color'
     *
     * The <accent-color> property sets the accent color for user-interface
     * controls generated by some elements.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color
     *
     * @var string
     */
    public const ACCENT_COLOR = 'accent-color';

    /**
     * CSS property 'align-content'
     *
     * The <align-content> property sets the distribution of space between and
     * around content items along a flexbox's cross-axis or a grid's block axis.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/align-content
     *
     * @var string
     */
    public const ALIGN_CONTENT = 'align-content';

    /**
     * CSS property 'align-items'
     *
     * The <align-items> property sets the align-self value on all direct
     * children as a group. In Flexbox, it controls the alignment of items on
     * the Cross Axis. In Grid Layout, it controls the alignment of items on the
     * Block Axis within their grid area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
     *
     * @var string
     */
    public const ALIGN_ITEMS = 'align-items';

    /**
     * CSS property 'align-self'
     *
     * The <align-self> property overrides a grid or flex item's align-items
     * value. In Grid, it aligns the item inside the grid area. In Flexbox, it
     * aligns the item on the cross axis.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/align-self
     *
     * @var string
     */
    public const ALIGN_SELF = 'align-self';

    /**
     * CSS property 'align-tracks'
     *
     * The <align-tracks> property sets the alignment in the masonry axis for
     * grid containers that have masonry in their block axis.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/align-tracks
     *
     * @var string
     */
    public const ALIGN_TRACKS = 'align-tracks';

    /**
     * CSS property 'all'
     *
     * The <all> shorthand property resets all of an element's properties except
     * unicode-bidi, direction, and CSS Custom Properties. It can set properties
     * to their initial or inherited values, or to the values specified in
     * another cascade layer or stylesheet origin.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/all
     *
     * @var string
     */
    public const ALL = 'all';

    /**
     * CSS property 'animation'
     *
     * The <animation> shorthand property applies an animation between styles.
     * It is a shorthand for animation-name, animation-duration,
     * animation-timing-function, animation-delay, animation-iteration-count,
     * animation-direction, animation-fill-mode, and animation-play-state.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation
     *
     * @var string
     */
    public const ANIMATION = 'animation';

    /**
     * CSS property 'animation-delay'
     *
     * The <animation-delay> property specifies the amount of time to wait from
     * applying the animation to an element before beginning to perform the
     * animation. The animation can start later, immediately from its beginning,
     * or immediately and partway through the animation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay
     *
     * @var string
     */
    public const ANIMATION_DELAY = 'animation-delay';

    /**
     * CSS property 'animation-direction'
     *
     * The <animation-direction> property sets whether an animation should play
     * forward, backward, or alternate back and forth between playing the
     * sequence forward and backward.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction
     *
     * @var string
     */
    public const ANIMATION_DIRECTION = 'animation-direction';

    /**
     * CSS property 'animation-duration'
     *
     * The <animation-duration> property sets the length of time that an
     * animation takes to complete one cycle.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration
     *
     * @var string
     */
    public const ANIMATION_DURATION = 'animation-duration';

    /**
     * CSS property 'animation-fill-mode'
     *
     * The <animation-fill-mode> property sets how a CSS animation applies
     * styles to its target before and after its execution.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode
     *
     * @var string
     */
    public const ANIMATION_FILL_MODE = 'animation-fill-mode';

    /**
     * CSS property 'animation-iteration-count'
     *
     * The <animation-iteration-count> property sets the number of times an
     * animation sequence should be played before stopping.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count
     *
     * @var string
     */
    public const ANIMATION_ITERATION_COUNT = 'animation-iteration-count';

    /**
     * CSS property 'animation-name'
     *
     * The <animation-name> property specifies the names of one or more
     * @keyframes at-rules describing the animation or animations to apply to
     * the element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name
     *
     * @var string
     */
    public const ANIMATION_NAME = 'animation-name';

    /**
     * CSS property 'animation-play-state'
     *
     * The <animation-play-state> property sets whether an animation is running
     * or paused.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state
     *
     * @var string
     */
    public const ANIMATION_PLAY_STATE = 'animation-play-state';

    /**
     * CSS property 'animation-timeline'
     *
     * The <animation-timeline> property specifies the names of one or more
     * @scroll-timeline at-rules describing the scroll animations to apply to
     * the element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline
     *
     * @var string
     */
    public const ANIMATION_TIMELINE = 'animation-timeline';

    /**
     * CSS property 'animation-timing-function'
     *
     * The <animation-timing-function> property sets how an animation progresses
     * through the duration of each cycle.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function
     *
     * @var string
     */
    public const ANIMATION_TIMING_FUNCTION = 'animation-timing-function';

    /**
     * CSS property 'appearance'
     *
     * The <appearance> property is used to control native appearance of UI
     * controls, that are based on operating system's theme.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/appearance
     *
     * @var string
     */
    public const APPEARANCE = 'appearance';

    /**
     * CSS property 'aspect-ratio'
     *
     * The <aspect-ratio> property sets a preferred aspect ratio for the box,
     * which will be used in the calculation of auto sizes and some other layout
     * functions.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio
     *
     * @var string
     */
    public const ASPECT_RATIO = 'aspect-ratio';

    /**
     * CSS property 'backdrop-filter'
     *
     * The <backdrop-filter> property lets you apply graphical effects such as
     * blurring or color shifting to the area behind an element. Because it
     * applies to everything behind the element, to see the effect you must make
     * the element or its background at least partially transparent.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter
     *
     * @var string
     */
    public const BACKDROP_FILTER = 'backdrop-filter';

    /**
     * CSS property 'backface-visibility'
     *
     * The <backface-visibility> property sets whether the back face of an
     * element is visible when turned towards the user.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility
     *
     * @var string
     */
    public const BACKFACE_VISIBILITY = 'backface-visibility';

    /**
     * CSS property 'background'
     *
     * The <background> shorthand property sets all background style properties
     * at once, such as color, image, origin and size, or repeat method.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background
     *
     * @var string
     */
    public const BACKGROUND = 'background';

    /**
     * CSS property 'background-attachment'
     *
     * The <background-attachment> property sets whether a background image's
     * position is fixed within the viewport, or scrolls with its containing
     * block.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment
     *
     * @var string
     */
    public const BACKGROUND_ATTACHMENT = 'background-attachment';

    /**
     * CSS property 'background-blend-mode'
     *
     * The <background-blend-mode> property sets how an element's background
     * images should blend with each other and with the element's background
     * color.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode
     *
     * @var string
     */
    public const BACKGROUND_BLEND_MODE = 'background-blend-mode';

    /**
     * CSS property 'background-clip'
     *
     * The <background-clip> property sets whether an element's background
     * extends underneath its border box, padding box, or content box.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip
     *
     * @var string
     */
    public const BACKGROUND_CLIP = 'background-clip';

    /**
     * CSS property 'background-color'
     *
     * The <background-color> property sets the background color of an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-color
     *
     * @var string
     */
    public const BACKGROUND_COLOR = 'background-color';

    /**
     * CSS property 'background-image'
     *
     * The <background-image> property sets one or more background images on an
     * element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-image
     *
     * @var string
     */
    public const BACKGROUND_IMAGE = 'background-image';

    /**
     * CSS property 'background-origin'
     *
     * The <background-origin> property sets the background's origin: from the
     * border start, inside the border, or inside the padding.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin
     *
     * @var string
     */
    public const BACKGROUND_ORIGIN = 'background-origin';

    /**
     * CSS property 'background-position'
     *
     * The <background-position> property sets the initial position for each
     * background image. The position is relative to the position layer set by
     * background-origin.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
     *
     * @var string
     */
    public const BACKGROUND_POSITION = 'background-position';

    /**
     * CSS property 'background-position-x'
     *
     * The <background-position-x> property sets the initial horizontal position
     * for each background image. The position is relative to the position layer
     * set by background-origin.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-x
     *
     * @var string
     */
    public const BACKGROUND_POSITION_X = 'background-position-x';

    /**
     * CSS property 'background-position-y'
     *
     * The <background-position-y> property sets the initial vertical position
     * for each background image. The position is relative to the position layer
     * set by background-origin.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-y
     *
     * @var string
     */
    public const BACKGROUND_POSITION_Y = 'background-position-y';

    /**
     * CSS property 'background-repeat'
     *
     * The <background-repeat> property sets how background images are repeated.
     * A background image can be repeated along the horizontal and vertical
     * axes, or not repeated at all.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat
     *
     * @var string
     */
    public const BACKGROUND_REPEAT = 'background-repeat';

    /**
     * CSS property 'background-size'
     *
     * The <background-size> property sets the size of the element's background
     * image. The image can be left to its natural size, stretched, or
     * constrained to fit the available space.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-size
     *
     * @var string
     */
    public const BACKGROUND_SIZE = 'background-size';

    /**
     * CSS property 'block-size'
     *
     * The <block-size> property defines the horizontal or vertical size of an
     * element's block, depending on its writing mode. It corresponds to either
     * the width or The <height> property, depending on the value of
     * writing-mode.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/block-size
     *
     * @var string
     */
    public const BLOCK_SIZE = 'block-size';

    /**
     * CSS property 'border'
     *
     * The <border> shorthand property sets an element's border. It sets the
     * values of border-width, border-style, and border-color.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border
     *
     * @var string
     */
    public const BORDER = 'border';

    /**
     * CSS property 'border-block'
     *
     * The <border-block> property is a shorthand property for setting the
     * individual logical block border property values in a single place in the
     * style sheet.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block
     *
     * @var string
     */
    public const BORDER_BLOCK = 'border-block';

    /**
     * CSS property 'border-block-color'
     *
     * The <border-block-color> property defines the color of the logical block
     * borders of an element, which maps to a physical border color depending on
     * the element's writing mode, directionality, and text orientation. It
     * corresponds to the border-top-color and border-bottom-color, or
     * border-right-color and border-left-color property depending on the values
     * defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-color
     *
     * @var string
     */
    public const BORDER_BLOCK_COLOR = 'border-block-color';

    /**
     * CSS property 'border-block-end'
     *
     * The <border-block-end> property is a shorthand property for setting the
     * individual logical block-end border property values in a single place in
     * the style sheet.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end
     *
     * @var string
     */
    public const BORDER_BLOCK_END = 'border-block-end';

    /**
     * CSS property 'border-block-end-color'
     *
     * The <border-block-end-color> property defines the color of the logical
     * block-end border of an element, which maps to a physical border color
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-color, border-right-color,
     * border-bottom-color, or border-left-color property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-color
     *
     * @var string
     */
    public const BORDER_BLOCK_END_COLOR = 'border-block-end-color';

    /**
     * CSS property 'border-block-end-style'
     *
     * The <border-block-end-style> property defines the style of the logical
     * block-end border of an element, which maps to a physical border style
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-style, border-right-style,
     * border-bottom-style, or border-left-style property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-style
     *
     * @var string
     */
    public const BORDER_BLOCK_END_STYLE = 'border-block-end-style';

    /**
     * CSS property 'border-block-end-width'
     *
     * The <border-block-end-width> property defines the width of the logical
     * block-end border of an element, which maps to a physical border width
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-width, border-right-width,
     * border-bottom-width, or border-left-width property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-width
     *
     * @var string
     */
    public const BORDER_BLOCK_END_WIDTH = 'border-block-end-width';

    /**
     * CSS property 'border-block-start'
     *
     * The <border-block-start> property is a shorthand property for setting the
     * individual logical block-start border property values in a single place
     * in the style sheet.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start
     *
     * @var string
     */
    public const BORDER_BLOCK_START = 'border-block-start';

    /**
     * CSS property 'border-block-start-color'
     *
     * The <border-block-start-color> property defines the color of the logical
     * block-start border of an element, which maps to a physical border color
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-color, border-right-color,
     * border-bottom-color, or border-left-color property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-color
     *
     * @var string
     */
    public const BORDER_BLOCK_START_COLOR = 'border-block-start-color';

    /**
     * CSS property 'border-block-start-style'
     *
     * The <border-block-start-style> property defines the style of the logical
     * block start border of an element, which maps to a physical border style
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-style, border-right-style,
     * border-bottom-style, or border-left-style property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-style
     *
     * @var string
     */
    public const BORDER_BLOCK_START_STYLE = 'border-block-start-style';

    /**
     * CSS property 'border-block-start-width'
     *
     * The <border-block-start-width> property defines the width of the logical
     * block-start border of an element, which maps to a physical border width
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-width, border-right-width,
     * border-bottom-width, or border-left-width property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-width
     *
     * @var string
     */
    public const BORDER_BLOCK_START_WIDTH = 'border-block-start-width';

    /**
     * CSS property 'border-block-style'
     *
     * The <border-block-style> property defines the style of the logical block
     * borders of an element, which maps to a physical border style depending on
     * the element's writing mode, directionality, and text orientation. It
     * corresponds to the border-top-style and border-bottom-style, or
     * border-left-style and border-right-style properties depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-style
     *
     * @var string
     */
    public const BORDER_BLOCK_STYLE = 'border-block-style';

    /**
     * CSS property 'border-block-width'
     *
     * The <border-block-width> property defines the width of the logical block
     * borders of an element, which maps to a physical border width depending on
     * the element's writing mode, directionality, and text orientation. It
     * corresponds to the border-top-width and border-bottom-width, or
     * border-left-width, and border-right-width property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-width
     *
     * @var string
     */
    public const BORDER_BLOCK_WIDTH = 'border-block-width';

    /**
     * CSS property 'border-bottom'
     *
     * The <border-bottom> shorthand property sets an element's bottom border.
     * It sets the values of border-bottom-width, border-bottom-style and
     * border-bottom-color.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom
     *
     * @var string
     */
    public const BORDER_BOTTOM = 'border-bottom';

    /**
     * CSS property 'border-bottom-color'
     *
     * The <border-bottom-color> property sets the color of an element's bottom
     * border. It can also be set with the shorthand CSS properties border-color
     * or border-bottom.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color
     *
     * @var string
     */
    public const BORDER_BOTTOM_COLOR = 'border-bottom-color';

    /**
     * CSS property 'border-bottom-left-radius'
     *
     * The <border-bottom-left-radius> property rounds the bottom-left corner of
     * an element by specifying the radius (or the radius of the semi-major and
     * semi-minor axes) of the ellipse defining the curvature of the corner.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius
     *
     * @var string
     */
    public const BORDER_BOTTOM_LEFT_RADIUS = 'border-bottom-left-radius';

    /**
     * CSS property 'border-bottom-right-radius'
     *
     * The <border-bottom-right-radius> property rounds the bottom-right corner
     * of an element by specifying the radius (or the radius of the semi-major
     * and semi-minor axes) of the ellipse defining the curvature of the corner.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius
     *
     * @var string
     */
    public const BORDER_BOTTOM_RIGHT_RADIUS = 'border-bottom-right-radius';

    /**
     * CSS property 'border-bottom-style'
     *
     * The <border-bottom-style> property sets the line style of an element's
     * bottom border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style
     *
     * @var string
     */
    public const BORDER_BOTTOM_STYLE = 'border-bottom-style';

    /**
     * CSS property 'border-bottom-width'
     *
     * The <border-bottom-width> property sets the width of the bottom border of
     * an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width
     *
     * @var string
     */
    public const BORDER_BOTTOM_WIDTH = 'border-bottom-width';

    /**
     * CSS property 'border-collapse'
     *
     * The <border-collapse> property sets whether cells inside a <table> have
     * shared or separate borders.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse
     *
     * @var string
     */
    public const BORDER_COLLAPSE = 'border-collapse';

    /**
     * CSS property 'border-color'
     *
     * The <border-color> shorthand property sets the color of an element's
     * border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-color
     *
     * @var string
     */
    public const BORDER_COLOR = 'border-color';

    /**
     * CSS property 'border-end-end-radius'
     *
     * The <border-end-end-radius> property defines a logical border radius on
     * an element, which maps to a physical border radius that depends on the
     * element's writing-mode, direction, and text-orientation. This is useful
     * when building styles to work regardless of the text orientation and
     * writing mode.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius
     *
     * @var string
     */
    public const BORDER_END_END_RADIUS = 'border-end-end-radius';

    /**
     * CSS property 'border-end-start-radius'
     *
     * The <border-end-start-radius> property defines a logical border radius on
     * an element, which maps to a physical border radius depending on the
     * element's writing-mode, direction, and text-orientation. This is useful
     * when building styles to work regardless of the text orientation and
     * writing mode.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-start-radius
     *
     * @var string
     */
    public const BORDER_END_START_RADIUS = 'border-end-start-radius';

    /**
     * CSS property 'border-image'
     *
     * The <border-image> property draws an image around a given element. It
     * replaces the element's regular border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-image
     *
     * @var string
     */
    public const BORDER_IMAGE = 'border-image';

    /**
     * CSS property 'border-image-outset'
     *
     * The <border-image-outset> property sets the distance by which an
     * element's border image is set out from its border box.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset
     *
     * @var string
     */
    public const BORDER_IMAGE_OUTSET = 'border-image-outset';

    /**
     * CSS property 'border-image-repeat'
     *
     * The <border-image-repeat> property defines how the edge regions of a
     * source image are adjusted to fit the dimensions of an element's border
     * image.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-repeat
     *
     * @var string
     */
    public const BORDER_IMAGE_REPEAT = 'border-image-repeat';

    /**
     * CSS property 'border-image-slice'
     *
     * The <border-image-slice> property divides the image specified by
     * border-image-source into regions. These regions form the components of an
     * element's border image.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-slice
     *
     * @var string
     */
    public const BORDER_IMAGE_SLICE = 'border-image-slice';

    /**
     * CSS property 'border-image-source'
     *
     * The <border-image-source> property sets the source image used to create
     * an element's border image.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-source
     *
     * @var string
     */
    public const BORDER_IMAGE_SOURCE = 'border-image-source';

    /**
     * CSS property 'border-image-width'
     *
     * The <border-image-width> property sets the width of an element's border
     * image.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width
     *
     * @var string
     */
    public const BORDER_IMAGE_WIDTH = 'border-image-width';

    /**
     * CSS property 'border-inline'
     *
     * The <border-inline> property is a shorthand property for setting the
     * individual logical inline border property values in a single place in the
     * style sheet.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline
     *
     * @var string
     */
    public const BORDER_INLINE = 'border-inline';

    /**
     * CSS property 'border-inline-color'
     *
     * The <border-inline-color> property defines the color of the logical
     * inline borders of an element, which maps to a physical border color
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-color and
     * border-bottom-color, or border-right-color and border-left-color property
     * depending on the values defined for writing-mode, direction, and
     * text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-color
     *
     * @var string
     */
    public const BORDER_INLINE_COLOR = 'border-inline-color';

    /**
     * CSS property 'border-inline-end'
     *
     * The <border-inline-end> property is a shorthand property for setting the
     * individual logical inline-end border property values in a single place in
     * the style sheet.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end
     *
     * @var string
     */
    public const BORDER_INLINE_END = 'border-inline-end';

    /**
     * CSS property 'border-inline-end-color'
     *
     * The <border-inline-end-color> property defines the color of the logical
     * inline-end border of an element, which maps to a physical border color
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-color, border-right-color,
     * border-bottom-color, or border-left-color property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-color
     *
     * @var string
     */
    public const BORDER_INLINE_END_COLOR = 'border-inline-end-color';

    /**
     * CSS property 'border-inline-end-style'
     *
     * The <border-inline-end-style> property defines the style of the logical
     * inline end border of an element, which maps to a physical border style
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-style, border-right-style,
     * border-bottom-style, or border-left-style property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-style
     *
     * @var string
     */
    public const BORDER_INLINE_END_STYLE = 'border-inline-end-style';

    /**
     * CSS property 'border-inline-end-width'
     *
     * The <border-inline-end-width> property defines the width of the logical
     * inline-end border of an element, which maps to a physical border width
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-width, border-right-width,
     * border-bottom-width, or border-left-width property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-width
     *
     * @var string
     */
    public const BORDER_INLINE_END_WIDTH = 'border-inline-end-width';

    /**
     * CSS property 'border-inline-start'
     *
     * The <border-inline-start> property is a shorthand property for setting
     * the individual logical inline-start border property values in a single
     * place in the style sheet.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start
     *
     * @var string
     */
    public const BORDER_INLINE_START = 'border-inline-start';

    /**
     * CSS property 'border-inline-start-color'
     *
     * The <border-inline-start-color> property defines the color of the logical
     * inline start border of an element, which maps to a physical border color
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-color, border-right-color,
     * border-bottom-color, or border-left-color property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-color
     *
     * @var string
     */
    public const BORDER_INLINE_START_COLOR = 'border-inline-start-color';

    /**
     * CSS property 'border-inline-start-style'
     *
     * The <border-inline-start-style> property defines the style of the logical
     * inline start border of an element, which maps to a physical border style
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-style, border-right-style,
     * border-bottom-style, or border-left-style property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-style
     *
     * @var string
     */
    public const BORDER_INLINE_START_STYLE = 'border-inline-start-style';

    /**
     * CSS property 'border-inline-start-width'
     *
     * The <border-inline-start-width> property defines the width of the logical
     * inline-start border of an element, which maps to a physical border width
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-width, border-right-width,
     * border-bottom-width, or border-left-width property depending on the
     * values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-width
     *
     * @var string
     */
    public const BORDER_INLINE_START_WIDTH = 'border-inline-start-width';

    /**
     * CSS property 'border-inline-style'
     *
     * The <border-inline-style> property defines the style of the logical
     * inline borders of an element, which maps to a physical border style
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-style and
     * border-bottom-style, or border-left-style and border-right-style
     * properties depending on the values defined for writing-mode, direction,
     * and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-style
     *
     * @var string
     */
    public const BORDER_INLINE_STYLE = 'border-inline-style';

    /**
     * CSS property 'border-inline-width'
     *
     * The <border-inline-width> property defines the width of the logical
     * inline borders of an element, which maps to a physical border width
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the border-top-width and
     * border-bottom-width, or border-left-width, and border-right-width
     * property depending on the values defined for writing-mode, direction, and
     * text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-width
     *
     * @var string
     */
    public const BORDER_INLINE_WIDTH = 'border-inline-width';

    /**
     * CSS property 'border-left'
     *
     * The <border-left> shorthand property sets all the properties of an
     * element's left border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-left
     *
     * @var string
     */
    public const BORDER_LEFT = 'border-left';

    /**
     * CSS property 'border-left-color'
     *
     * The <border-left-color> property sets the color of an element's left
     * border. It can also be set with the shorthand CSS properties border-color
     * or border-left.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color
     *
     * @var string
     */
    public const BORDER_LEFT_COLOR = 'border-left-color';

    /**
     * CSS property 'border-left-style'
     *
     * The <border-left-style> property sets the line style of an element's left
     * border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style
     *
     * @var string
     */
    public const BORDER_LEFT_STYLE = 'border-left-style';

    /**
     * CSS property 'border-left-width'
     *
     * The <border-left-width> property sets the width of the left border of an
     * element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width
     *
     * @var string
     */
    public const BORDER_LEFT_WIDTH = 'border-left-width';

    /**
     * CSS property 'border-radius'
     *
     * The <border-radius> property rounds the corners of an element's outer
     * border edge. You can set a single radius to make circular corners, or two
     * radii to make elliptical corners.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius
     *
     * @var string
     */
    public const BORDER_RADIUS = 'border-radius';

    /**
     * CSS property 'border-right'
     *
     * The <border-right> shorthand property sets all the properties of an
     * element's right border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-right
     *
     * @var string
     */
    public const BORDER_RIGHT = 'border-right';

    /**
     * CSS property 'border-right-color'
     *
     * The <border-right-color> property sets the color of an element's right
     * border. It can also be set with the shorthand CSS properties border-color
     * or border-right.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color
     *
     * @var string
     */
    public const BORDER_RIGHT_COLOR = 'border-right-color';

    /**
     * CSS property 'border-right-style'
     *
     * The <border-right-style> property sets the line style of an element's
     * right border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style
     *
     * @var string
     */
    public const BORDER_RIGHT_STYLE = 'border-right-style';

    /**
     * CSS property 'border-right-width'
     *
     * The <border-right-width> property sets the width of the right border of
     * an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width
     *
     * @var string
     */
    public const BORDER_RIGHT_WIDTH = 'border-right-width';

    /**
     * CSS property 'border-spacing'
     *
     * The <border-spacing> property sets the distance between the borders of
     * adjacent cells in a <table>. This property applies only when
     * border-collapse is separate.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-spacing
     *
     * @var string
     */
    public const BORDER_SPACING = 'border-spacing';

    /**
     * CSS property 'border-start-end-radius'
     *
     * The <border-start-end-radius> property defines a logical border radius on
     * an element, which maps to a physical border radius depending on the
     * element's writing-mode, direction, and text-orientation. This is useful
     * when building styles to work regardless of the text orientation and
     * writing mode.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius
     *
     * @var string
     */
    public const BORDER_START_END_RADIUS = 'border-start-end-radius';

    /**
     * CSS property 'border-start-start-radius'
     *
     * The <border-start-start-radius> property defines a logical border radius
     * on an element, which maps to a physical border radius that depends on the
     * element's writing-mode, direction, and text-orientation. This is useful
     * when building styles to work regardless of the text orientation and
     * writing mode.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-start-radius
     *
     * @var string
     */
    public const BORDER_START_START_RADIUS = 'border-start-start-radius';

    /**
     * CSS property 'border-style'
     *
     * The <border-style> shorthand property sets the line style for all four
     * sides of an element's border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-style
     *
     * @var string
     */
    public const BORDER_STYLE = 'border-style';

    /**
     * CSS property 'border-top'
     *
     * The <border-top> shorthand property sets all the properties of an
     * element's top border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-top
     *
     * @var string
     */
    public const BORDER_TOP = 'border-top';

    /**
     * CSS property 'border-top-color'
     *
     * The <border-top-color> property sets the color of an element's top
     * border. It can also be set with the shorthand CSS properties border-color
     * or border-top.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color
     *
     * @var string
     */
    public const BORDER_TOP_COLOR = 'border-top-color';

    /**
     * CSS property 'border-top-left-radius'
     *
     * The <border-top-left-radius> property rounds the top-left corner of an
     * element by specifying the radius (or the radius of the semi-major and
     * semi-minor axes) of the ellipse defining the curvature of the corner.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius
     *
     * @var string
     */
    public const BORDER_TOP_LEFT_RADIUS = 'border-top-left-radius';

    /**
     * CSS property 'border-top-right-radius'
     *
     * The <border-top-right-radius> property rounds the top-right corner of an
     * element by specifying the radius (or the radius of the semi-major and
     * semi-minor axes) of the ellipse defining the curvature of the corner.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius
     *
     * @var string
     */
    public const BORDER_TOP_RIGHT_RADIUS = 'border-top-right-radius';

    /**
     * CSS property 'border-top-style'
     *
     * The <border-top-style> property sets the line style of an element's top
     * border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style
     *
     * @var string
     */
    public const BORDER_TOP_STYLE = 'border-top-style';

    /**
     * CSS property 'border-top-width'
     *
     * The <border-top-width> property sets the width of the top border of an
     * element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width
     *
     * @var string
     */
    public const BORDER_TOP_WIDTH = 'border-top-width';

    /**
     * CSS property 'border-width'
     *
     * The <border-width> shorthand property sets the width of an element's
     * border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border-width
     *
     * @var string
     */
    public const BORDER_WIDTH = 'border-width';

    /**
     * CSS property 'bottom'
     *
     * The <bottom> property participates in setting the vertical position of a
     * positioned element. It has no effect on non-positioned elements.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/bottom
     *
     * @var string
     */
    public const BOTTOM = 'bottom';

    /**
     * CSS property 'box-decoration-break'
     *
     * The <box-decoration-break> property specifies how an element's fragments
     * should be rendered when broken across multiple lines, columns, or pages.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/box-decoration-break
     *
     * @var string
     */
    public const BOX_DECORATION_BREAK = 'box-decoration-break';

    /**
     * CSS property 'box-shadow'
     *
     * The <box-shadow> property adds shadow effects around an element's frame.
     * You can set multiple effects separated by commas. A box shadow is
     * described by X and Y offsets relative to the element, blur and spread
     * radius, and color.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow
     *
     * @var string
     */
    public const BOX_SHADOW = 'box-shadow';

    /**
     * CSS property 'box-sizing'
     *
     * The <box-sizing> property sets how the total width and height of an
     * element is calculated.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
     *
     * @var string
     */
    public const BOX_SIZING = 'box-sizing';

    /**
     * CSS property 'break-after'
     *
     * The <break-after> property sets how page, column, or region breaks should
     * behave after a generated box. If there is no generated box, the property
     * is ignored.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/break-after
     *
     * @var string
     */
    public const BREAK_AFTER = 'break-after';

    /**
     * CSS property 'break-before'
     *
     * The <break-before> property sets how page, column, or region breaks
     * should behave before a generated box. If there is no generated box, the
     * property is ignored.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/break-before
     *
     * @var string
     */
    public const BREAK_BEFORE = 'break-before';

    /**
     * CSS property 'break-inside'
     *
     * The <break-inside> property sets how page, column, or region breaks
     * should behave inside a generated box. If there is no generated box, the
     * property is ignored.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/break-inside
     *
     * @var string
     */
    public const BREAK_INSIDE = 'break-inside';

    /**
     * CSS property 'caption-side'
     *
     * The <caption-side> property puts the content of a table's <caption> on
     * the specified side. The values are relative to the writing-mode of the
     * table.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/caption-side
     *
     * @var string
     */
    public const CAPTION_SIDE = 'caption-side';

    /**
     * CSS property 'caret-color'
     *
     * The <caret-color> property sets the color of the insertion caret, the
     * visible marker where the next character typed will be inserted. This is
     * sometimes referred to as the text input cursor. The caret appears in
     * elements such as <input> or those with the contenteditable attribute. The
     * caret is typically a thin vertical line that flashes to help make it more
     * noticeable. By default, it is black, but its color can be altered with
     * this property.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/caret-color
     *
     * @var string
     */
    public const CARET_COLOR = 'caret-color';

    /**
     * CSS property 'clear'
     *
     * The <clear> property sets whether an element must be moved below
     * (cleared) floating elements that precede it. The <clear> property applies
     * to floating and non-floating elements.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/clear
     *
     * @var string
     */
    public const CLEAR = 'clear';

    /**
     * CSS property 'clip'
     *
     * The <clip> property defines a visible portion of an element. The <clip>
     * property applies only to absolutely positioned elements - that is,
     * elements with position:absolute or position:fixed.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/clip
     *
     * @var string
     * @deprecated
     */
    public const CLIP = 'clip';

    /**
     * CSS property 'clip-path'
     *
     * The <clip-path> property creates a clipping region that sets what part of
     * an element should be shown. Parts that are inside the region are shown,
     * while those outside are hidden.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path
     *
     * @var string
     */
    public const CLIP_PATH = 'clip-path';

    /**
     * CSS property 'color'
     *
     * The <color> property sets the foreground color value of an element's text
     * and text decorations, and sets the currentcolor value. currentcolor may
     * be used as an indirect value on other properties and is the default for
     * other color properties, such as border-color.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color
     *
     * @var string
     */
    public const COLOR = 'color';

    /**
     * CSS property 'color-scheme'
     *
     * The <color-scheme> property allows an element to indicate which color
     * schemes it can comfortably be rendered in.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     *
     * @var string
     */
    public const COLOR_SCHEME = 'color-scheme';

    /**
     * CSS property 'column-count'
     *
     * The <column-count> property breaks an element's content into the
     * specified number of columns.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/column-count
     *
     * @var string
     */
    public const COLUMN_COUNT = 'column-count';

    /**
     * CSS property 'column-fill'
     *
     * The <column-fill> property controls how an element's contents are
     * balanced when broken into columns.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/column-fill
     *
     * @var string
     */
    public const COLUMN_FILL = 'column-fill';

    /**
     * CSS property 'column-gap'
     *
     * The <column-gap> property sets the size of the gap (gutter) between an
     * element's columns.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
     *
     * @var string
     */
    public const COLUMN_GAP = 'column-gap';

    /**
     * CSS property 'column-rule'
     *
     * The <column-rule> shorthand property sets the width, style, and color of
     * the line drawn between columns in a multi-column layout.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule
     *
     * @var string
     */
    public const COLUMN_RULE = 'column-rule';

    /**
     * CSS property 'column-rule-color'
     *
     * The <column-rule-color> property sets the color of the line drawn between
     * columns in a multi-column layout.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-color
     *
     * @var string
     */
    public const COLUMN_RULE_COLOR = 'column-rule-color';

    /**
     * CSS property 'column-rule-style'
     *
     * The <column-rule-style> property sets the style of the line drawn between
     * columns in a multi-column layout.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-style
     *
     * @var string
     */
    public const COLUMN_RULE_STYLE = 'column-rule-style';

    /**
     * CSS property 'column-rule-width'
     *
     * The <column-rule-width> property sets the width of the line drawn between
     * columns in a multi-column layout.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-width
     *
     * @var string
     */
    public const COLUMN_RULE_WIDTH = 'column-rule-width';

    /**
     * CSS property 'column-span'
     *
     * The <column-span> property makes it possible for an element to span
     * across all columns when its value is set to all.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/column-span
     *
     * @var string
     */
    public const COLUMN_SPAN = 'column-span';

    /**
     * CSS property 'column-width'
     *
     * The <column-width> property sets the ideal column width in a multi-column
     * layout. The container will have as many columns as can fit without any of
     * them having a width less than the column-width value. If the width of the
     * container is narrower than the specified value, the single column's width
     * will be smaller than the declared column width.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/column-width
     *
     * @var string
     */
    public const COLUMN_WIDTH = 'column-width';

    /**
     * CSS property 'columns'
     *
     * The <columns> shorthand property sets the number of columns to use when
     * drawing an element's contents, as well as those columns' widths.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/columns
     *
     * @var string
     */
    public const COLUMNS = 'columns';

    /**
     * CSS property 'contain'
     *
     * The <contain> property allows an author to indicate that an element and
     * its contents are, as much as possible, independent of the rest of the
     * document tree. This allows the browser to recalculate layout, style,
     * paint, size, or any combination of them for a limited area of the DOM and
     * not the entire page, leading to obvious performance benefits.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/contain
     *
     * @var string
     */
    public const CONTAIN = 'contain';

    /**
     * CSS property 'content'
     *
     * The <content> property replaces an element with a generated value.
     * Objects inserted using The <content> property are anonymous replaced
     * elements.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/content
     *
     * @var string
     */
    public const CONTENT = 'content';

    /**
     * CSS property 'content-visibility'
     *
     * The <content-visibility> property controls whether or not an element
     * renders its contents at all, along with forcing a strong set of
     * containments, allowing user agents to potentially omit large swathes of
     * layout and rendering work until it becomes needed. Basically it enables
     * the user agent to skip an element's rendering work (including layout and
     * painting) until it is needed - which makes the initial page load much
     * faster.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility
     *
     * @var string
     */
    public const CONTENT_VISIBILITY = 'content-visibility';

    /**
     * CSS property 'counter-increment'
     *
     * The <counter-increment> property increases or decreases the value of a
     * CSS counter by a given value.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/counter-increment
     *
     * @var string
     */
    public const COUNTER_INCREMENT = 'counter-increment';

    /**
     * CSS property 'counter-reset'
     *
     * The <counter-reset> property resets a CSS counter to a given value. This
     * property will create a new counter or reversed counter with the given
     * name on the specified element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/counter-reset
     *
     * @var string
     */
    public const COUNTER_RESET = 'counter-reset';

    /**
     * CSS property 'counter-set'
     *
     * The <counter-set> property sets a CSS counter to a given value. It
     * manipulates the value of existing counters, and will only create new
     * counters if there isn't already a counter of the given name on the
     * element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/counter-set
     *
     * @var string
     */
    public const COUNTER_SET = 'counter-set';

    /**
     * CSS property 'cursor'
     *
     * The <cursor> property sets the mouse cursor, if any, to show when the
     * mouse pointer is over an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/cursor
     *
     * @var string
     */
    public const CURSOR = 'cursor';

    /**
     * CSS property 'direction'
     *
     * The <direction> property sets the direction of text, table columns, and
     * horizontal overflow. Use rtl for languages written from right to left
     * (like Hebrew or Arabic), and ltr for those written from left to right
     * (like English and most other languages).
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/direction
     *
     * @var string
     */
    public const DIRECTION = 'direction';

    /**
     * CSS property 'display'
     *
     * The <display> property sets whether an element is treated as a block or
     * inline element and the layout used for its children, such as flow layout,
     * grid or flex.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/display
     *
     * @var string
     */
    public const DISPLAY = 'display';

    /**
     * CSS property 'empty-cells'
     *
     * The <empty-cells> property sets whether borders and backgrounds appear
     * around <table> cells that have no visible content.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/empty-cells
     *
     * @var string
     */
    public const EMPTY_CELLS = 'empty-cells';

    /**
     * CSS property 'filter'
     *
     * The <filter> property applies graphical effects like blur or color shift
     * to an element. Filters are commonly used to adjust the rendering of
     * images, backgrounds, and borders.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/filter
     *
     * @var string
     */
    public const FILTER = 'filter';

    /**
     * CSS property 'flex'
     *
     * The <flex> shorthand property sets how a flex item will grow or shrink to
     * fit the space available in its flex container.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex
     *
     * @var string
     */
    public const FLEX = 'flex';

    /**
     * CSS property 'flex-basis'
     *
     * The <flex-basis> property sets the initial main size of a flex item. It
     * sets the size of the content box unless otherwise set with box-sizing.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
     *
     * @var string
     */
    public const FLEX_BASIS = 'flex-basis';

    /**
     * CSS property 'flex-direction'
     *
     * The <flex-direction> property sets how flex items are placed in the flex
     * container defining the main axis and the direction (normal or reversed).
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
     *
     * @var string
     */
    public const FLEX_DIRECTION = 'flex-direction';

    /**
     * CSS property 'flex-flow'
     *
     * The <flex-flow> shorthand property specifies the direction of a flex
     * container, as well as its wrapping behavior.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow
     *
     * @var string
     */
    public const FLEX_FLOW = 'flex-flow';

    /**
     * CSS property 'flex-grow'
     *
     * The <flex-grow> property sets the flex grow factor of a flex item's main
     * size.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow
     *
     * @var string
     */
    public const FLEX_GROW = 'flex-grow';

    /**
     * CSS property 'flex-shrink'
     *
     * The <flex-shrink> property sets the flex shrink factor of a flex item. If
     * the size of all flex items is larger than the flex container, items
     * shrink to fit according to flex-shrink.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink
     *
     * @var string
     */
    public const FLEX_SHRINK = 'flex-shrink';

    /**
     * CSS property 'flex-wrap'
     *
     * The <flex-wrap> property sets whether flex items are forced onto one line
     * or can wrap onto multiple lines. If wrapping is allowed, it sets the
     * direction that lines are stacked.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
     *
     * @var string
     */
    public const FLEX_WRAP = 'flex-wrap';

    /**
     * CSS property 'float'
     *
     * The <float> property places an element on the left or right side of its
     * container, allowing text and inline elements to wrap around it. The
     * element is removed from the normal flow of the page, though still
     * remaining a part of the flow (in contrast to absolute positioning).
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/float
     *
     * @var string
     */
    public const FLOAT = 'float';

    /**
     * CSS property 'font'
     *
     * The <font> shorthand property sets all the different properties of an
     * element's font. Alternatively, it sets an element's font to a system
     * font.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font
     *
     * @var string
     */
    public const FONT = 'font';

    /**
     * CSS property 'font-family'
     *
     * The <font-family> property specifies a prioritized list of one or more
     * font family names and/or generic family names for the selected element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family
     *
     * @var string
     */
    public const FONT_FAMILY = 'font-family';

    /**
     * CSS property 'font-feature-settings'
     *
     * The <font-feature-settings> property controls advanced typographic
     * features in OpenType fonts.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings
     *
     * @var string
     */
    public const FONT_FEATURE_SETTINGS = 'font-feature-settings';

    /**
     * CSS property 'font-kerning'
     *
     * The <font-kerning> property sets the use of the kerning information
     * stored in a font.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-kerning
     *
     * @var string
     */
    public const FONT_KERNING = 'font-kerning';

    /**
     * CSS property 'font-language-override'
     *
     * The <font-language-override> property controls the use of
     * language-specific glyphs in a typeface.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-language-override
     *
     * @var string
     */
    public const FONT_LANGUAGE_OVERRIDE = 'font-language-override';

    /**
     * CSS property 'font-optical-sizing'
     *
     * The <font-optical-sizing> property sets whether text rendering is
     * optimized for viewing at different sizes.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-optical-sizing
     *
     * @var string
     */
    public const FONT_OPTICAL_SIZING = 'font-optical-sizing';

    /**
     * CSS property 'font-size'
     *
     * The <font-size> property sets the size of the font. Changing the font
     * size also updates the sizes of the font size-relative <length> units,
     * such as em, ex, and so forth.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-size
     *
     * @var string
     */
    public const FONT_SIZE = 'font-size';

    /**
     * CSS property 'font-size-adjust'
     *
     * The <font-size-adjust> property sets the size of lower-case letters
     * relative to the current font size (which defines the size of upper-case
     * letters).
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust
     *
     * @var string
     */
    public const FONT_SIZE_ADJUST = 'font-size-adjust';

    /**
     * CSS property 'font-stretch'
     *
     * The <font-stretch> property selects a normal, condensed, or expanded face
     * from a font.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-stretch
     *
     * @var string
     */
    public const FONT_STRETCH = 'font-stretch';

    /**
     * CSS property 'font-style'
     *
     * The <font-style> property sets whether a font should be styled with a
     * normal, italic, or oblique face from its font-family.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-style
     *
     * @var string
     */
    public const FONT_STYLE = 'font-style';

    /**
     * CSS property 'font-synthesis'
     *
     * The <font-synthesis> property controls which missing typefaces, bold,
     * italic, or small-caps, may be synthesized by the browser.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis
     *
     * @var string
     */
    public const FONT_SYNTHESIS = 'font-synthesis';

    /**
     * CSS property 'font-variant'
     *
     * The <font-variant> shorthand property allows you to set all the font
     * variants for a font.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant
     *
     * @var string
     */
    public const FONT_VARIANT = 'font-variant';

    /**
     * CSS property 'font-variant-alternates'
     *
     * The <font-variant-alternates> property controls the usage of alternate
     * glyphs. These alternate glyphs may be referenced by alternative names
     * defined in @font-feature-values.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-alternates
     *
     * @var string
     */
    public const FONT_VARIANT_ALTERNATES = 'font-variant-alternates';

    /**
     * CSS property 'font-variant-caps'
     *
     * The <font-variant-caps> property controls the use of alternate glyphs for
     * capital letters.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-caps
     *
     * @var string
     */
    public const FONT_VARIANT_CAPS = 'font-variant-caps';

    /**
     * CSS property 'font-variant-east-asian'
     *
     * The <font-variant-east-asian> property controls the use of alternate
     * glyphs for East Asian scripts, like Japanese and Chinese.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-east-asian
     *
     * @var string
     */
    public const FONT_VARIANT_EAST_ASIAN = 'font-variant-east-asian';

    /**
     * CSS property 'font-variant-ligatures'
     *
     * The <font-variant-ligatures> property controls which ligatures and
     * contextual forms are used in textual content of the elements it applies
     * to. This leads to more harmonized forms in the resulting text.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-ligatures
     *
     * @var string
     */
    public const FONT_VARIANT_LIGATURES = 'font-variant-ligatures';

    /**
     * CSS property 'font-variant-numeric'
     *
     * The <font-variant-numeric> property controls the usage of alternate
     * glyphs for numbers, fractions, and ordinal markers.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric
     *
     * @var string
     */
    public const FONT_VARIANT_NUMERIC = 'font-variant-numeric';

    /**
     * CSS property 'font-variant-position'
     *
     * The <font-variant-position> property controls the use of alternate,
     * smaller glyphs that are positioned as superscript or subscript.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-position
     *
     * @var string
     */
    public const FONT_VARIANT_POSITION = 'font-variant-position';

    /**
     * CSS property 'font-variation-settings'
     *
     * The <font-variation-settings> property provides low-level control over
     * variable font characteristics, by specifying the four letter axis names
     * of the characteristics you want to vary, along with their values.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-variation-settings
     *
     * @var string
     */
    public const FONT_VARIATION_SETTINGS = 'font-variation-settings';

    /**
     * CSS property 'font-weight'
     *
     * The <font-weight> property sets the weight (or boldness) of the font. The
     * weights available depend on the font-family that is currently set.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
     *
     * @var string
     */
    public const FONT_WEIGHT = 'font-weight';

    /**
     * CSS property 'forced-color-adjust'
     *
     * The <forced-color-adjust> property allows authors to opt certain elements
     * out of forced colors mode. This then restores the control of those values
     * to CSS.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/forced-color-adjust
     *
     * @var string
     */
    public const FORCED_COLOR_ADJUST = 'forced-color-adjust';

    /**
     * CSS property 'gap' (grid-gap)
     *
     * The <gap> property sets the gaps (gutters) between rows and columns. It
     * is a shorthand for row-gap and column-gap.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/gap
     *
     * @var string
     */
    public const GAP = 'gap';

    /**
     * CSS property 'grid'
     *
     * The <grid> property is a shorthand property that sets all of the explicit
     * and implicit grid properties in a single declaration.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid
     *
     * @var string
     */
    public const GRID = 'grid';

    /**
     * CSS property 'grid-area'
     *
     * The <grid-area> shorthand property specifies a grid item's size and
     * location within a grid by contributing a line, a span, or nothing
     * (automatic) to its grid placement, thereby specifying the edges of its
     * grid area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area
     *
     * @var string
     */
    public const GRID_AREA = 'grid-area';

    /**
     * CSS property 'grid-auto-columns'
     *
     * The <grid-auto-columns> property specifies the size of an
     * implicitly-created grid column track or pattern of tracks.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns
     *
     * @var string
     */
    public const GRID_AUTO_COLUMNS = 'grid-auto-columns';

    /**
     * CSS property 'grid-auto-flow'
     *
     * The <grid-auto-flow> property controls how the auto-placement algorithm
     * works, specifying exactly how auto-placed items get flowed into the grid.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow
     *
     * @var string
     */
    public const GRID_AUTO_FLOW = 'grid-auto-flow';

    /**
     * CSS property 'grid-auto-rows'
     *
     * The <grid-auto-rows> property specifies the size of an implicitly-created
     * grid row track or pattern of tracks.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows
     *
     * @var string
     */
    public const GRID_AUTO_ROWS = 'grid-auto-rows';

    /**
     * CSS property 'grid-column'
     *
     * The <grid-column> shorthand property specifies a grid item's size and
     * location within a grid column by contributing a line, a span, or nothing
     * (automatic) to its grid placement, thereby specifying the inline-start
     * and inline-end edge of its grid area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column
     *
     * @var string
     */
    public const GRID_COLUMN = 'grid-column';

    /**
     * CSS property 'grid-column-end'
     *
     * The <grid-column-end> property specifies a grid item's end position
     * within the grid column by contributing a line, a span, or nothing
     * (automatic) to its grid placement, thereby specifying the block-end edge
     * of its grid area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end
     *
     * @var string
     */
    public const GRID_COLUMN_END = 'grid-column-end';

    /**
     * CSS property 'grid-column-start'
     *
     * The <grid-column-start> property specifies a grid item's start position
     * within the grid column by contributing a line, a span, or nothing
     * (automatic) to its grid placement. This start position defines the
     * block-start edge of the grid area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start
     *
     * @var string
     */
    public const GRID_COLUMN_START = 'grid-column-start';

    /**
     * CSS property 'grid-row'
     *
     * The <grid-row> shorthand property specifies a grid item's size and
     * location within the grid row by contributing a line, a span, or nothing
     * (automatic) to its grid placement, thereby specifying the inline-start
     * and inline-end edge of its grid area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row
     *
     * @var string
     */
    public const GRID_ROW = 'grid-row';

    /**
     * CSS property 'grid-row-end'
     *
     * The <grid-row-end> property specifies a grid item's end position within
     * the grid row by contributing a line, a span, or nothing (automatic) to
     * its grid placement, thereby specifying the inline-end edge of its grid
     * area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end
     *
     * @var string
     */
    public const GRID_ROW_END = 'grid-row-end';

    /**
     * CSS property 'grid-row-start'
     *
     * The <grid-row-start> property specifies a grid item's start position
     * within the grid row by contributing a line, a span, or nothing
     * (automatic) to its grid placement, thereby specifying the inline-start
     * edge of its grid area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start
     *
     * @var string
     */
    public const GRID_ROW_START = 'grid-row-start';

    /**
     * CSS property 'grid-template'
     *
     * The <grid-template> property is a shorthand property for defining grid
     * columns, rows, and areas.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template
     *
     * @var string
     */
    public const GRID_TEMPLATE = 'grid-template';

    /**
     * CSS property 'grid-template-areas'
     *
     * The <grid-template-areas> property specifies named grid areas,
     * establishing the cells in the grid and assigning them names.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas
     *
     * @var string
     */
    public const GRID_TEMPLATE_AREAS = 'grid-template-areas';

    /**
     * CSS property 'grid-template-columns'
     *
     * The <grid-template-columns> property defines the line names and track
     * sizing functions of the grid columns.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns
     *
     * @var string
     */
    public const GRID_TEMPLATE_COLUMNS = 'grid-template-columns';

    /**
     * CSS property 'grid-template-rows'
     *
     * The <grid-template-rows> property defines the line names and track sizing
     * functions of the grid rows.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows
     *
     * @var string
     */
    public const GRID_TEMPLATE_ROWS = 'grid-template-rows';

    /**
     * CSS property 'hanging-punctuation'
     *
     * The <hanging-punctuation> property specifies whether a punctuation mark
     * should hang at the start or end of a line of text. Hanging punctuation
     * may be placed outside the line box.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/hanging-punctuation
     *
     * @var string
     */
    public const HANGING_PUNCTUATION = 'hanging-punctuation';

    /**
     * CSS property 'height'
     *
     * The <height> property specifies the height of an element. By default, the
     * property defines the height of the content area. If box-sizing is set to
     * border-box, however, it instead determines the height of the border area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/height
     *
     * @var string
     */
    public const HEIGHT = 'height';

    /**
     * CSS property 'hyphenate-character'
     *
     * The <hyphenate-character> property sets the character (or string) used at
     * the end of a line before a hyphenation break.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/hyphenate-character
     *
     * @var string
     */
    public const HYPHENATE_CHARACTER = 'hyphenate-character';

    /**
     * CSS property 'hyphens'
     *
     * The <hyphens> property specifies how words should be hyphenated when text
     * wraps across multiple lines. It can prevent hyphenation entirely,
     * hyphenate at manually-specified points within the text, or let the
     * browser automatically insert hyphens where appropriate.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens
     *
     * @var string
     */
    public const HYPHENS = 'hyphens';

    /**
     * CSS property 'image-orientation'
     *
     * The <image-orientation> property specifies a layout-independent
     * correction to the orientation of an image.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation
     *
     * @var string
     */
    public const IMAGE_ORIENTATION = 'image-orientation';

    /**
     * CSS property 'image-rendering'
     *
     * The <image-rendering> property sets an image scaling algorithm. The
     * property applies to an element itself, to any images set in its other
     * properties, and to its descendants.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering
     *
     * @var string
     */
    public const IMAGE_RENDERING = 'image-rendering';

    /**
     * CSS property 'image-resolution'
     *
     * The <image-resolution> property specifies the intrinsic resolution of all
     * raster images used in or on the element. It affects content images such
     * as replaced elements and generated content, and decorative images such as
     * background-image images.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/image-resolution
     *
     * @var string
     */
    public const IMAGE_RESOLUTION = 'image-resolution';

    /**
     * CSS property 'ime-mode'
     *
     * The <ime-mode> property controls the state of the input method editor
     * (IME) for text fields. This property is obsolete.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/ime-mode
     *
     * @var string
     * @deprecated
     */
    public const IME_MODE = 'ime-mode';

    /**
     * CSS property 'initial-letter'
     *
     * The <initial-letter> property sets styling for dropped, raised, and
     * sunken initial letters.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/initial-letter
     *
     * @var string
     */
    public const INITIAL_LETTER = 'initial-letter';

    /**
     * CSS property 'initial-letter-align'
     *
     * The <initial-letter-align> property specifies the alignment of initial
     * letters within a paragraph.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/initial-letter-align
     *
     * @var string
     */
    public const INITIAL_LETTER_ALIGN = 'initial-letter-align';

    /**
     * CSS property 'inline-size'
     *
     * The <inline-size> property defines the horizontal or vertical size of an
     * element's block, depending on its writing mode. It corresponds to either
     * the width or The <height> property, depending on the value of
     * writing-mode.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size
     *
     * @var string
     */
    public const INLINE_SIZE = 'inline-size';

    /**
     * CSS property 'inset'
     *
     * The <inset> property is a shorthand that corresponds to the top, right,
     * bottom, and/or left properties. It has the same multi-value syntax of the
     * margin shorthand.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/inset
     *
     * @var string
     */
    public const INSET = 'inset';

    /**
     * CSS property 'inset-block'
     *
     * The <inset-block> property defines the logical block start and end
     * offsets of an element, which maps to physical offsets depending on the
     * element's writing mode, directionality, and text orientation. It
     * corresponds to the top and bottom, or right and left properties depending
     * on the values defined for writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block
     *
     * @var string
     */
    public const INSET_BLOCK = 'inset-block';

    /**
     * CSS property 'inset-block-end'
     *
     * The <inset-block-end> property defines the logical block end offset of an
     * element, which maps to a physical inset depending on the element's
     * writing mode, directionality, and text orientation. It corresponds to the
     * top, right, bottom, or left property depending on the values defined for
     * writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block-end
     *
     * @var string
     */
    public const INSET_BLOCK_END = 'inset-block-end';

    /**
     * CSS property 'inset-block-start'
     *
     * The <inset-block-start> property defines the logical block start offset
     * of an element, which maps to a physical inset depending on the element's
     * writing mode, directionality, and text orientation. It corresponds to the
     * top, right, bottom, or left property depending on the values defined for
     * writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block-start
     *
     * @var string
     */
    public const INSET_BLOCK_START = 'inset-block-start';

    /**
     * CSS property 'inset-inline'
     *
     * The <inset-inline> property defines the logical start and end offsets of
     * an element in the inline direction, which maps to physical offsets
     * depending on the element's writing mode, directionality, and text
     * orientation. It corresponds to the top and bottom, or right and left
     * properties depending on the values defined for writing-mode, direction,
     * and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline
     *
     * @var string
     */
    public const INSET_INLINE = 'inset-inline';

    /**
     * CSS property 'inset-inline-end'
     *
     * The <inset-inline-end> property defines the logical inline end inset of
     * an element, which maps to a physical offset depending on the element's
     * writing mode, directionality, and text orientation. It corresponds to the
     * top, right, bottom, or left property depending on the values defined for
     * writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-end
     *
     * @var string
     */
    public const INSET_INLINE_END = 'inset-inline-end';

    /**
     * CSS property 'inset-inline-start'
     *
     * The <inset-inline-start> property defines the logical inline start inset
     * of an element, which maps to a physical offset depending on the element's
     * writing mode, directionality, and text orientation. It corresponds to the
     * top, right, bottom, or left property depending on the values defined for
     * writing-mode, direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-start
     *
     * @var string
     */
    public const INSET_INLINE_START = 'inset-inline-start';

    /**
     * CSS property 'isolation'
     *
     * The <isolation> property determines whether an element must create a new
     * stacking context.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/isolation
     *
     * @var string
     */
    public const ISOLATION = 'isolation';

    /**
     * CSS property 'justify-content'
     *
     * The <justify-content> property defines how the browser distributes space
     * between and around content items along the main-axis of a flex container,
     * and the inline axis of a grid container.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
     *
     * @var string
     */
    public const JUSTIFY_CONTENT = 'justify-content';

    /**
     * CSS property 'justify-items'
     *
     * The <justify-items> property defines the default justify-self for all
     * items of the box, giving them all a default way of justifying each box
     * along the appropriate axis.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items
     *
     * @var string
     */
    public const JUSTIFY_ITEMS = 'justify-items';

    /**
     * CSS property 'justify-self'
     *
     * The <justify-self> property sets the way a box is justified inside its
     * alignment container along the appropriate axis.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self
     *
     * @var string
     */
    public const JUSTIFY_SELF = 'justify-self';

    /**
     * CSS property 'justify-tracks'
     *
     * The <justify-tracks> property sets the alignment in the masonry axis for
     * grid containers that have masonry in their inline axis.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/justify-tracks
     *
     * @var string
     */
    public const JUSTIFY_TRACKS = 'justify-tracks';

    /**
     * CSS property 'left'
     *
     * The <left> property participates in specifying the horizontal position of
     * a positioned element. It has no effect on non-positioned elements.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/left
     *
     * @var string
     */
    public const LEFT = 'left';

    /**
     * CSS property 'letter-spacing'
     *
     * The <letter-spacing> property sets the horizontal spacing behavior
     * between text characters. This value is added to the natural spacing
     * between characters while rendering the text. Positive values of
     * letter-spacing causes characters to spread farther apart, while negative
     * values of letter-spacing bring characters closer together.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing
     *
     * @var string
     */
    public const LETTER_SPACING = 'letter-spacing';

    /**
     * CSS property 'line-break'
     *
     * The <line-break> property sets how to break lines of Chinese, Japanese,
     * or Korean (CJK) text when working with punctuation and symbols.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-break
     *
     * @var string
     */
    public const LINE_BREAK = 'line-break';

    /**
     * CSS property 'line-height'
     *
     * The <line-height> property sets the height of a line box. It's commonly
     * used to set the distance between lines of text. On block-level elements,
     * it specifies the minimum height of line boxes within the element. On
     * non-replaced inline elements, it specifies the height that is used to
     * calculate line box height.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
     *
     * @var string
     */
    public const LINE_HEIGHT = 'line-height';

    /**
     * CSS property 'line-height-step'
     *
     * The <line-height-step> property sets the step unit for line box heights.
     * When the property is set, line box heights are rounded up to the closest
     * multiple of the unit.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height-step
     *
     * @var string
     */
    public const LINE_HEIGHT_STEP = 'line-height-step';

    /**
     * CSS property 'list-style'
     *
     * The <list-style> shorthand property allows you to set all the list style
     * properties at once.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/list-style
     *
     * @var string
     */
    public const LIST_STYLE = 'list-style';

    /**
     * CSS property 'list-style-image'
     *
     * The <list-style-image> property sets an image to be used as the list item
     * marker.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-image
     *
     * @var string
     */
    public const LIST_STYLE_IMAGE = 'list-style-image';

    /**
     * CSS property 'list-style-position'
     *
     * The <list-style-position> property sets the position of the ::marker
     * relative to a list item.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position
     *
     * @var string
     */
    public const LIST_STYLE_POSITION = 'list-style-position';

    /**
     * CSS property 'list-style-type'
     *
     * The <list-style-type> property sets the marker (such as a disc,
     * character, or custom counter style) of a list item element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type
     *
     * @var string
     */
    public const LIST_STYLE_TYPE = 'list-style-type';

    /**
     * CSS property 'margin'
     *
     * The <margin> shorthand property sets the margin area on all four sides of
     * an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin
     *
     * @var string
     */
    public const MARGIN = 'margin';

    /**
     * CSS property 'margin-block'
     *
     * The <margin-block> shorthand property defines the logical block start and
     * end margins of an element, which maps to physical margins depending on
     * the element's writing mode, directionality, and text orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block
     *
     * @var string
     */
    public const MARGIN_BLOCK = 'margin-block';

    /**
     * CSS property 'margin-block-end'
     *
     * The <margin-block-end> property defines the logical block end margin of
     * an element, which maps to a physical margin depending on the element's
     * writing mode, directionality, and text orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end
     *
     * @var string
     */
    public const MARGIN_BLOCK_END = 'margin-block-end';

    /**
     * CSS property 'margin-block-start'
     *
     * The <margin-block-start> property defines the logical block start margin
     * of an element, which maps to a physical margin depending on the element's
     * writing mode, directionality, and text orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start
     *
     * @var string
     */
    public const MARGIN_BLOCK_START = 'margin-block-start';

    /**
     * CSS property 'margin-bottom'
     *
     * The <margin-bottom> property sets the margin area on the bottom of an
     * element. A positive value places it farther from its neighbors, while a
     * negative value places it closer.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom
     *
     * @var string
     */
    public const MARGIN_BOTTOM = 'margin-bottom';

    /**
     * CSS property 'margin-inline'
     *
     * The <margin-inline> shorthand property is a shorthand property that
     * defines both the logical inline start and end margins of an element,
     * which maps to physical margins depending on the element's writing mode,
     * directionality, and text orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline
     *
     * @var string
     */
    public const MARGIN_INLINE = 'margin-inline';

    /**
     * CSS property 'margin-inline-end'
     *
     * The <margin-inline-end> property defines the logical inline end margin of
     * an element, which maps to a physical margin depending on the element's
     * writing mode, directionality, and text orientation. In other words, it
     * corresponds to the margin-top, margin-right, margin-bottom or margin-left
     * property depending on the values defined for writing-mode, direction, and
     * text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end
     *
     * @var string
     */
    public const MARGIN_INLINE_END = 'margin-inline-end';

    /**
     * CSS property 'margin-inline-start'
     *
     * The <margin-inline-start> property defines the logical inline start
     * margin of an element, which maps to a physical margin depending on the
     * element's writing mode, directionality, and text orientation. It
     * corresponds to the margin-top, margin-right, margin-bottom, or
     * margin-left property depending on the values defined for writing-mode,
     * direction, and text-orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start
     *
     * @var string
     */
    public const MARGIN_INLINE_START = 'margin-inline-start';

    /**
     * CSS property 'margin-left'
     *
     * The <margin-left> property sets the margin area on the left side of an
     * element. A positive value places it farther from its neighbors, while a
     * negative value places it closer.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left
     *
     * @var string
     */
    public const MARGIN_LEFT = 'margin-left';

    /**
     * CSS property 'margin-right'
     *
     * The <margin-right> property sets the margin area on the right side of an
     * element. A positive value places it farther from its neighbors, while a
     * negative value places it closer.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right
     *
     * @var string
     */
    public const MARGIN_RIGHT = 'margin-right';

    /**
     * CSS property 'margin-top'
     *
     * The <margin-top> property sets the margin area on the top of an element.
     * A positive value places it farther from its neighbors, while a negative
     * value places it closer.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top
     *
     * @var string
     */
    public const MARGIN_TOP = 'margin-top';

    /**
     * CSS property 'margin-trim'
     *
     * The <margin-trim> property allows the container to trim the margins of
     * its children where they adjoin the container's edges.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-trim
     *
     * @var string
     */
    public const MARGIN_TRIM = 'margin-trim';

    /**
     * CSS property 'mask'
     *
     * The <mask> shorthand property hides an element (partially or fully) by
     * masking or clipping the image at specific points.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask
     *
     * @var string
     */
    public const MASK = 'mask';

    /**
     * CSS property 'mask-border'
     *
     * The <mask-border> shorthand property lets you create a mask along the
     * edge of an element's border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border
     *
     * @var string
     */
    public const MASK_BORDER = 'mask-border';

    /**
     * CSS property 'mask-border-mode'
     *
     * The <mask-border-mode> property specifies the blending mode used in a
     * mask border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-mode
     *
     * @var string
     */
    public const MASK_BORDER_MODE = 'mask-border-mode';

    /**
     * CSS property 'mask-border-outset'
     *
     * The <mask-border-outset> property specifies the distance by which an
     * element's mask border is set out from its border box.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-outset
     *
     * @var string
     */
    public const MASK_BORDER_OUTSET = 'mask-border-outset';

    /**
     * CSS property 'mask-border-repeat'
     *
     * The <mask-border-repeat> property sets how the edge regions of a source
     * image are adjusted to fit the dimensions of an element's mask border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-repeat
     *
     * @var string
     */
    public const MASK_BORDER_REPEAT = 'mask-border-repeat';

    /**
     * CSS property 'mask-border-slice'
     *
     * The <mask-border-slice> property divides the image set by
     * mask-border-source into regions. These regions are used to form the
     * components of an element's mask border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-slice
     *
     * @var string
     */
    public const MASK_BORDER_SLICE = 'mask-border-slice';

    /**
     * CSS property 'mask-border-source'
     *
     * The <mask-border-source> property sets the source image used to create an
     * element's mask border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-source
     *
     * @var string
     */
    public const MASK_BORDER_SOURCE = 'mask-border-source';

    /**
     * CSS property 'mask-border-width'
     *
     * The <mask-border-width> property sets the width of an element's mask
     * border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-width
     *
     * @var string
     */
    public const MASK_BORDER_WIDTH = 'mask-border-width';

    /**
     * CSS property 'mask-clip'
     *
     * The <mask-clip> property determines the area which is affected by a mask.
     * The painted content of an element must be restricted to this area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-clip
     *
     * @var string
     */
    public const MASK_CLIP = 'mask-clip';

    /**
     * CSS property 'mask-composite'
     *
     * The <mask-composite> property represents a compositing operation used on
     * the current mask layer with the mask layers below it.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-composite
     *
     * @var string
     */
    public const MASK_COMPOSITE = 'mask-composite';

    /**
     * CSS property 'mask-image'
     *
     * The <mask-image> property sets the image that is used as mask layer for
     * an element. By default this means the alpha channel of the mask image
     * will be multiplied with the alpha channel of the element. This can be
     * controlled with The <mask-mode> property.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image
     *
     * @var string
     */
    public const MASK_IMAGE = 'mask-image';

    /**
     * CSS property 'mask-mode'
     *
     * The <mask-mode> property sets whether the mask reference defined by
     * mask-image is treated as a luminance or alpha mask.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-mode
     *
     * @var string
     */
    public const MASK_MODE = 'mask-mode';

    /**
     * CSS property 'mask-origin'
     *
     * The <mask-origin> property sets the origin of a mask.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-origin
     *
     * @var string
     */
    public const MASK_ORIGIN = 'mask-origin';

    /**
     * CSS property 'mask-position'
     *
     * The <mask-position> property sets the initial position, relative to the
     * mask position layer set by mask-origin, for each defined mask image.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-position
     *
     * @var string
     */
    public const MASK_POSITION = 'mask-position';

    /**
     * CSS property 'mask-repeat'
     *
     * The <mask-repeat> property sets how mask images are repeated. A mask
     * image can be repeated along the horizontal axis, the vertical axis, both
     * axes, or not repeated at all.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-repeat
     *
     * @var string
     */
    public const MASK_REPEAT = 'mask-repeat';

    /**
     * CSS property 'mask-size'
     *
     * The <mask-size> property specifies the sizes of the mask images. The size
     * of the image can be fully or partially constrained in order to preserve
     * its intrinsic ratio.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-size
     *
     * @var string
     */
    public const MASK_SIZE = 'mask-size';

    /**
     * CSS property 'mask-type'
     *
     * The <mask-type> property sets whether an SVG <mask> element is used as a
     * luminance or an alpha mask. It applies to the <mask> element itself.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mask-type
     *
     * @var string
     */
    public const MASK_TYPE = 'mask-type';

    /**
     * CSS property 'masonry-auto-flow'
     *
     * The <masonry-auto-flow> property modifies how items are placed when using
     * masonry in CSS Grid Layout.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/masonry-auto-flow
     *
     * @var string
     */
    public const MASONRY_AUTO_FLOW = 'masonry-auto-flow';

    /**
     * CSS property 'max-block-size'
     *
     * The <max-block-size> property specifies the maximum size of an element in
     * the direction opposite that of the writing direction as specified by
     * writing-mode. That is, if the writing direction is horizontal, then
     * max-block-size is equivalent to max-height; if the writing direction is
     * vertical, max-block-size is the same as max-width.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/max-block-size
     *
     * @var string
     */
    public const MAX_BLOCK_SIZE = 'max-block-size';

    /**
     * CSS property 'max-height'
     *
     * The <max-height> property sets the maximum height of an element. It
     * prevents the used value of The <height> property from becoming larger
     * than the value specified for max-height.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/max-height
     *
     * @var string
     */
    public const MAX_HEIGHT = 'max-height';

    /**
     * CSS property 'max-inline-size'
     *
     * The <max-inline-size> property defines the horizontal or vertical maximum
     * size of an element's block, depending on its writing mode. It corresponds
     * to either the max-width or The <max-height> property, depending on the
     * value of writing-mode.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/max-inline-size
     *
     * @var string
     */
    public const MAX_INLINE_SIZE = 'max-inline-size';

    /**
     * CSS property 'max-width'
     *
     * The <max-width> property sets the maximum width of an element. It
     * prevents the used value of The <width> property from becoming larger than
     * the value specified by max-width.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/max-width
     *
     * @var string
     */
    public const MAX_WIDTH = 'max-width';

    /**
     * CSS property 'min-block-size'
     *
     * The <min-block-size> property defines the minimum horizontal or vertical
     * size of an element's block, depending on its writing mode. It corresponds
     * to either the min-width or The <min-height> property, depending on the
     * value of writing-mode.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/min-block-size
     *
     * @var string
     */
    public const MIN_BLOCK_SIZE = 'min-block-size';

    /**
     * CSS property 'min-height'
     *
     * The <min-height> property sets the minimum height of an element. It
     * prevents the used value of The <height> property from becoming smaller
     * than the value specified for min-height.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/min-height
     *
     * @var string
     */
    public const MIN_HEIGHT = 'min-height';

    /**
     * CSS property 'min-inline-size'
     *
     * The <min-inline-size> property defines the horizontal or vertical minimal
     * size of an element's block, depending on its writing mode. It corresponds
     * to either the min-width or The <min-height> property, depending on the
     * value of writing-mode.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/min-inline-size
     *
     * @var string
     */
    public const MIN_INLINE_SIZE = 'min-inline-size';

    /**
     * CSS property 'min-width'
     *
     * The <min-width> property sets the minimum width of an element. It
     * prevents the used value of The <width> property from becoming smaller
     * than the value specified for min-width.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/min-width
     *
     * @var string
     */
    public const MIN_WIDTH = 'min-width';

    /**
     * CSS property 'mix-blend-mode'
     *
     * The <mix-blend-mode> property sets how an element's content should blend
     * with the content of the element's parent and the element's background.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode
     *
     * @var string
     */
    public const MIX_BLEND_MODE = 'mix-blend-mode';

    /**
     * CSS property 'object-fit'
     *
     * The <object-fit> property sets how the content of a replaced element,
     * such as an <img> or <video>, should be resized to fit its container.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit
     *
     * @var string
     */
    public const OBJECT_FIT = 'object-fit';

    /**
     * CSS property 'object-position'
     *
     * The <object-position> property specifies the alignment of the selected
     * replaced element's contents within the element's box. Areas of the box
     * which aren't covered by the replaced element's object will show the
     * element's background.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/object-position
     *
     * @var string
     */
    public const OBJECT_POSITION = 'object-position';

    /**
     * CSS property 'offset'
     *
     * The <offset> shorthand property sets all the properties required for
     * animating an element along a defined path.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/offset
     *
     * @var string
     */
    public const OFFSET = 'offset';

    /**
     * CSS property 'offset-anchor'
     *
     * The <offset-anchor> property specifies the point inside the box of an
     * element traveling along an offset-path that is actually moving along the
     * path.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/offset-anchor
     *
     * @var string
     */
    public const OFFSET_ANCHOR = 'offset-anchor';

    /**
     * CSS property 'offset-distance'
     *
     * The <offset-distance> property specifies a position along an offset-path
     * for an element to be placed.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/offset-distance
     *
     * @var string
     */
    public const OFFSET_DISTANCE = 'offset-distance';

    /**
     * CSS property 'offset-path'
     *
     * The <offset-path> property specifies a motion path for an element to
     * follow and defines the element's positioning within the parent container
     * or SVG coordinate system.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/offset-path
     *
     * @var string
     */
    public const OFFSET_PATH = 'offset-path';

    /**
     * CSS property 'offset-position'
     *
     * The <offset-position> property defines the initial position of the
     * offset-path.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/offset-position
     *
     * @var string
     */
    public const OFFSET_POSITION = 'offset-position';

    /**
     * CSS property 'offset-rotate'
     *
     * The <offset-rotate> property defines the orientation/direction of the
     * element as it is positioned along the offset-path.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/offset-rotate
     *
     * @var string
     */
    public const OFFSET_ROTATE = 'offset-rotate';

    /**
     * CSS property 'opacity'
     *
     * The <opacity> property sets the opacity of an element. Opacity is the
     * degree to which content behind an element is hidden, and is the opposite
     * of transparency.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/opacity
     *
     * @var string
     */
    public const OPACITY = 'opacity';

    /**
     * CSS property 'order'
     *
     * The <order> property sets the order to lay out an item in a flex or grid
     * container. Items in a container are sorted by ascending order value and
     * then by their source code order.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/order
     *
     * @var string
     */
    public const ORDER = 'order';

    /**
     * CSS property 'orphans'
     *
     * The <orphans> property sets the minimum number of lines in a block
     * container that must be shown at the bottom of a page, region, or column.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/orphans
     *
     * @var string
     */
    public const ORPHANS = 'orphans';

    /**
     * CSS property 'outline'
     *
     * The <outline> shorthand property sets most of the outline properties in a
     * single declaration.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/outline
     *
     * @var string
     */
    public const OUTLINE = 'outline';

    /**
     * CSS property 'outline-color'
     *
     * The <outline-color> property sets the color of an element's outline.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/outline-color
     *
     * @var string
     */
    public const OUTLINE_COLOR = 'outline-color';

    /**
     * CSS property 'outline-offset'
     *
     * The <outline-offset> property sets the amount of space between an outline
     * and the edge or border of an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/outline-offset
     *
     * @var string
     */
    public const OUTLINE_OFFSET = 'outline-offset';

    /**
     * CSS property 'outline-style'
     *
     * The <outline-style> property sets the style of an element's outline. An
     * outline is a line that is drawn around an element, outside the border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/outline-style
     *
     * @var string
     */
    public const OUTLINE_STYLE = 'outline-style';

    /**
     * CSS property 'outline-width'
     *
     * The <outline-width> property sets the thickness of an element's outline.
     * An outline is a line that is drawn around an element, outside the border.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/outline-width
     *
     * @var string
     */
    public const OUTLINE_WIDTH = 'outline-width';

    /**
     * CSS property 'overflow'
     *
     * The <overflow> shorthand property sets the desired behavior for an
     * element's overflow - i.e. when an element's content is too big to fit in
     * its block formatting context - in both directions.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overflow
     *
     * @var string
     */
    public const OVERFLOW = 'overflow';

    /**
     * CSS property 'overflow-anchor'
     *
     * The <overflow-anchor> property provides a way to opt out of the browser's
     * scroll anchoring behavior, which adjusts scroll position to minimize
     * content shifts.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor
     *
     * @var string
     */
    public const OVERFLOW_ANCHOR = 'overflow-anchor';

    /**
     * CSS property 'overflow-block'
     *
     * The <overflow-block> property sets what shows when content overflows the
     * block start and block end edges of a box. This may be nothing, a scroll
     * bar, or the overflow content.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-block
     *
     * @var string
     */
    public const OVERFLOW_BLOCK = 'overflow-block';

    /**
     * CSS property 'overflow-clip-margin'
     *
     * The <overflow-clip-margin> property determines how far outside its bounds
     * an element with overflow: clip may be painted before being clipped.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-margin
     *
     * @var string
     */
    public const OVERFLOW_CLIP_MARGIN = 'overflow-clip-margin';

    /**
     * CSS property 'overflow-inline'
     *
     * The <overflow-inline> property sets what shows when content overflows the
     * inline start and end edges of a box. This may be nothing, a scroll bar,
     * or the overflow content.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-inline
     *
     * @var string
     */
    public const OVERFLOW_INLINE = 'overflow-inline';

    /**
     * CSS property 'overflow-wrap'
     *
     * The <overflow-wrap> property applies to inline elements, setting whether
     * the browser should insert line breaks within an otherwise unbreakable
     * string to prevent text from overflowing its line box.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap
     *
     * @var string
     */
    public const OVERFLOW_WRAP = 'overflow-wrap';

    /**
     * CSS property 'overflow-x'
     *
     * The <overflow-x> property sets what shows when content overflows a
     * block-level element's left and right edges. This may be nothing, a scroll
     * bar, or the overflow content.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x
     *
     * @var string
     */
    public const OVERFLOW_X = 'overflow-x';

    /**
     * CSS property 'overflow-y'
     *
     * The <overflow-y> property sets what shows when content overflows a
     * block-level element's top and bottom edges. This may be nothing, a scroll
     * bar, or the overflow content.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y
     *
     * @var string
     */
    public const OVERFLOW_Y = 'overflow-y';

    /**
     * CSS property 'overscroll-behavior'
     *
     * The <overscroll-behavior> property sets what a browser does when reaching
     * the boundary of a scrolling area. It's a shorthand for
     * overscroll-behavior-x and overscroll-behavior-y.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior
     *
     * @var string
     */
    public const OVERSCROLL_BEHAVIOR = 'overscroll-behavior';

    /**
     * CSS property 'overscroll-behavior-block'
     *
     * The <overscroll-behavior-block> property sets the browser's behavior when
     * the block direction boundary of a scrolling area is reached.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-block
     *
     * @var string
     */
    public const OVERSCROLL_BEHAVIOR_BLOCK = 'overscroll-behavior-block';

    /**
     * CSS property 'overscroll-behavior-inline'
     *
     * The <overscroll-behavior-inline> property sets the browser's behavior
     * when the inline direction boundary of a scrolling area is reached.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-inline
     *
     * @var string
     */
    public const OVERSCROLL_BEHAVIOR_INLINE = 'overscroll-behavior-inline';

    /**
     * CSS property 'overscroll-behavior-x'
     *
     * The <overscroll-behavior-x> property sets the browser's behavior when the
     * horizontal boundary of a scrolling area is reached.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-x
     *
     * @var string
     */
    public const OVERSCROLL_BEHAVIOR_X = 'overscroll-behavior-x';

    /**
     * CSS property 'overscroll-behavior-y'
     *
     * The <overscroll-behavior-y> property sets the browser's behavior when the
     * vertical boundary of a scrolling area is reached.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-y
     *
     * @var string
     */
    public const OVERSCROLL_BEHAVIOR_Y = 'overscroll-behavior-y';

    /**
     * CSS property 'padding'
     *
     * The <padding> shorthand property sets the padding area on all four sides
     * of an element at once.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding
     *
     * @var string
     */
    public const PADDING = 'padding';

    /**
     * CSS property 'padding-block'
     *
     * The <padding-block> shorthand property defines the logical block start
     * and end padding of an element, which maps to physical padding properties
     * depending on the element's writing mode, directionality, and text
     * orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block
     *
     * @var string
     */
    public const PADDING_BLOCK = 'padding-block';

    /**
     * CSS property 'padding-block-end'
     *
     * The <padding-block-end> property defines the logical block end padding of
     * an element, which maps to a physical padding depending on the element's
     * writing mode, directionality, and text orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end
     *
     * @var string
     */
    public const PADDING_BLOCK_END = 'padding-block-end';

    /**
     * CSS property 'padding-block-start'
     *
     * The <padding-block-start> property defines the logical block start
     * padding of an element, which maps to a physical padding depending on the
     * element's writing mode, directionality, and text orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-start
     *
     * @var string
     */
    public const PADDING_BLOCK_START = 'padding-block-start';

    /**
     * CSS property 'padding-bottom'
     *
     * The <padding-bottom> property sets the height of the padding area on the
     * bottom of an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom
     *
     * @var string
     */
    public const PADDING_BOTTOM = 'padding-bottom';

    /**
     * CSS property 'padding-inline'
     *
     * The <padding-inline> shorthand property defines the logical inline start
     * and end padding of an element, which maps to physical padding properties
     * depending on the element's writing mode, directionality, and text
     * orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline
     *
     * @var string
     */
    public const PADDING_INLINE = 'padding-inline';

    /**
     * CSS property 'padding-inline-end'
     *
     * The <padding-inline-end> property defines the logical inline end padding
     * of an element, which maps to a physical padding depending on the
     * element's writing mode, directionality, and text orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end
     *
     * @var string
     */
    public const PADDING_INLINE_END = 'padding-inline-end';

    /**
     * CSS property 'padding-inline-start'
     *
     * The <padding-inline-start> property defines the logical inline start
     * padding of an element, which maps to a physical padding depending on the
     * element's writing mode, directionality, and text orientation.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start
     *
     * @var string
     */
    public const PADDING_INLINE_START = 'padding-inline-start';

    /**
     * CSS property 'padding-left'
     *
     * The <padding-left> property sets the width of the padding area to the
     * left of an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left
     *
     * @var string
     */
    public const PADDING_LEFT = 'padding-left';

    /**
     * CSS property 'padding-right'
     *
     * The <padding-right> property sets the width of the padding area on the
     * right of an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right
     *
     * @var string
     */
    public const PADDING_RIGHT = 'padding-right';

    /**
     * CSS property 'padding-top'
     *
     * The <padding-top> property sets the height of the padding area on the top
     * of an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top
     *
     * @var string
     */
    public const PADDING_TOP = 'padding-top';

    /**
     * CSS property 'page-break-after'
     *
     * The <page-break-after> property adjusts page breaks after the current
     * element. Warning: This property has been replaced by The <break-after>
     * property.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-after
     *
     * @var string
     */
    public const PAGE_BREAK_AFTER = 'page-break-after';

    /**
     * CSS property 'page-break-before'
     *
     * The <page-break-before> property adjusts page breaks before the current
     * element. Warning: This property has been replaced by The <break-before>
     * property.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-before
     *
     * @var string
     */
    public const PAGE_BREAK_BEFORE = 'page-break-before';

    /**
     * CSS property 'page-break-inside'
     *
     * The <page-break-inside> property adjusts page breaks inside the current
     * element. Warning: This property has been replaced by The <break-inside>
     * property.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-inside
     *
     * @var string
     */
    public const PAGE_BREAK_INSIDE = 'page-break-inside';

    /**
     * CSS property 'paint-order'
     *
     * The <paint-order> property lets you control the order in which the fill
     * and stroke (and painting markers) of text content and shapes are drawn.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/paint-order
     *
     * @var string
     */
    public const PAINT_ORDER = 'paint-order';

    /**
     * CSS property 'perspective'
     *
     * The <perspective> property determines the distance between the z=0 plane
     * and the user in order to give a 3D-positioned element some perspective.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/perspective
     *
     * @var string
     */
    public const PERSPECTIVE = 'perspective';

    /**
     * CSS property 'perspective-origin'
     *
     * The <perspective-origin> property determines the position at which the
     * viewer is looking. It is used as the vanishing point by The <perspective>
     * property.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/perspective-origin
     *
     * @var string
     */
    public const PERSPECTIVE_ORIGIN = 'perspective-origin';

    /**
     * CSS property 'place-content'
     *
     * The <place-content> shorthand property allows you to align content along
     * both the block and inline directions at once (i.e. the align-content and
     * justify-content properties) in a relevant layout system such as Grid or
     * Flexbox.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/place-content
     *
     * @var string
     */
    public const PLACE_CONTENT = 'place-content';

    /**
     * CSS property 'place-items'
     *
     * The <place-items> shorthand property allows you to align items along both
     * the block and inline directions at once (i.e. the align-items and
     * justify-items properties) in a relevant layout system such as Grid or
     * Flexbox. If the second value is not set, the first value is also used for
     * it.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/place-items
     *
     * @var string
     */
    public const PLACE_ITEMS = 'place-items';

    /**
     * CSS property 'place-self'
     *
     * The <place-self> shorthand property allows you to align an individual
     * item in both the block and inline directions at once (i.e. the align-self
     * and justify-self properties) in a relevant layout system such as Grid or
     * Flexbox. If the second value is not present, the first value is also used
     * for it.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/place-self
     *
     * @var string
     */
    public const PLACE_SELF = 'place-self';

    /**
     * CSS property 'pointer-events'
     *
     * The <pointer-events> property sets under what circumstances (if any) a
     * particular graphic element can become the target of pointer events.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events
     *
     * @var string
     */
    public const POINTER_EVENTS = 'pointer-events';

    /**
     * CSS property 'position'
     *
     * The <position> property sets how an element is positioned in a document.
     * The top, right, bottom, and left properties determine the final location
     * of positioned elements.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/position
     *
     * @var string
     */
    public const POSITION = 'position';

    /**
     * CSS property 'print-color-adjust'
     *
     * The <print-color-adjust> property sets what, if anything, the user agent
     * may do to optimize the appearance of the element on the output device. By
     * default, the browser is allowed to make any adjustments to the element's
     * appearance it determines to be necessary and prudent given the type and
     * capabilities of the output device.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/print-color-adjust
     *
     * @var string
     */
    public const PRINT_COLOR_ADJUST = 'print-color-adjust';

    /**
     * CSS property 'quotes'
     *
     * The <quotes> property sets how the browser should render quotation marks
     * that are added using the open-quotes or close-quotes values of The
     * <content> property.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/quotes
     *
     * @var string
     */
    public const QUOTES = 'quotes';

    /**
     * CSS property 'resize'
     *
     * The <resize> property sets whether an element is resizable, and if so, in
     * which directions.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/resize
     *
     * @var string
     */
    public const RESIZE = 'resize';

    /**
     * CSS property 'right'
     *
     * The <right> property participates in specifying the horizontal position
     * of a positioned element. It has no effect on non-positioned elements.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/right
     *
     * @var string
     */
    public const RIGHT = 'right';

    /**
     * CSS property 'rotate'
     *
     * The <rotate> property allows you to specify rotation transforms
     * individually and independently of The <transform> property. This maps
     * better to typical user interface usage, and saves having to remember the
     * exact order of transform functions to specify in The <transform>
     * property.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/rotate
     *
     * @var string
     */
    public const ROTATE = 'rotate';

    /**
     * CSS property 'row-gap'
     *
     * The <row-gap> property sets the size of the gap (gutter) between an
     * element's rows.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap
     *
     * @var string
     */
    public const ROW_GAP = 'row-gap';

    /**
     * CSS property 'ruby-align'
     *
     * The <ruby-align> property defines the distribution of the different ruby
     * elements over the base.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-align
     *
     * @var string
     */
    public const RUBY_ALIGN = 'ruby-align';

    /**
     * CSS property 'ruby-position'
     *
     * The <ruby-position> property defines the position of a ruby element
     * relatives to its base element. It can be positioned over the element
     * (over), under it (under), or between the characters on their right side
     * (inter-character).
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-position
     *
     * @var string
     */
    public const RUBY_POSITION = 'ruby-position';

    /**
     * CSS property 'scale'
     *
     * The <scale> property allows you to specify scale transforms individually
     * and independently of The <transform> property. This maps better to
     * typical user interface usage, and saves having to remember the exact
     * order of transform functions to specify in the transform value.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scale
     *
     * @var string
     */
    public const SCALE = 'scale';

    /**
     * CSS property 'scroll-behavior'
     *
     * The <scroll-behavior> property sets the behavior for a scrolling box when
     * scrolling is triggered by the navigation or CSSOM scrolling APIs.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior
     *
     * @var string
     */
    public const SCROLL_BEHAVIOR = 'scroll-behavior';

    /**
     * CSS property 'scroll-margin'
     *
     * The <scroll-margin> shorthand property sets all of the scroll margins of
     * an element at once, assigning values much like The <margin> property does
     * for margins of an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin
     *
     * @var string
     */
    public const SCROLL_MARGIN = 'scroll-margin';

    /**
     * CSS property 'scroll-margin-block'
     *
     * The <scroll-margin-block> shorthand property sets the scroll margins of
     * an element in the block dimension.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block
     *
     * @var string
     */
    public const SCROLL_MARGIN_BLOCK = 'scroll-margin-block';

    /**
     * CSS property 'scroll-margin-block-end'
     *
     * The <scroll-margin-block-end> property defines the margin of the scroll
     * snap area at the end of the block dimension that is used for snapping
     * this box to the snapport. The scroll snap area is determined by taking
     * the transformed border box, finding its rectangular bounding box
     * (axis-aligned in the scroll container's coordinate space), then adding
     * the specified outsets.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block-end
     *
     * @var string
     */
    public const SCROLL_MARGIN_BLOCK_END = 'scroll-margin-block-end';

    /**
     * CSS property 'scroll-margin-block-start'
     *
     * The <scroll-margin-block-start> property defines the margin of the scroll
     * snap area at the start of the block dimension that is used for snapping
     * this box to the snapport. The scroll snap area is determined by taking
     * the transformed border box, finding its rectangular bounding box
     * (axis-aligned in the scroll container's coordinate space), then adding
     * the specified outsets.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block-start
     *
     * @var string
     */
    public const SCROLL_MARGIN_BLOCK_START = 'scroll-margin-block-start';

    /**
     * CSS property 'scroll-margin-bottom'
     *
     * The <scroll-margin-bottom> property defines the bottom margin of the
     * scroll snap area that is used for snapping this box to the snapport. The
     * scroll snap area is determined by taking the transformed border box,
     * finding its rectangular bounding box (axis-aligned in the scroll
     * container's coordinate space), then adding the specified outsets.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-bottom
     *
     * @var string
     */
    public const SCROLL_MARGIN_BOTTOM = 'scroll-margin-bottom';

    /**
     * CSS property 'scroll-margin-inline'
     *
     * The <scroll-margin-inline> shorthand property sets the scroll margins of
     * an element in the inline dimension.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline
     *
     * @var string
     */
    public const SCROLL_MARGIN_INLINE = 'scroll-margin-inline';

    /**
     * CSS property 'scroll-margin-inline-end'
     *
     * The <scroll-margin-inline-end> property defines the margin of the scroll
     * snap area at the end of the inline dimension that is used for snapping
     * this box to the snapport. The scroll snap area is determined by taking
     * the transformed border box, finding its rectangular bounding box
     * (axis-aligned in the scroll container's coordinate space), then adding
     * the specified outsets.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline-end
     *
     * @var string
     */
    public const SCROLL_MARGIN_INLINE_END = 'scroll-margin-inline-end';

    /**
     * CSS property 'scroll-margin-inline-start'
     *
     * The <scroll-margin-inline-start> property defines the margin of the
     * scroll snap area at the start of the inline dimension that is used for
     * snapping this box to the snapport. The scroll snap area is determined by
     * taking the transformed border box, finding its rectangular bounding box
     * (axis-aligned in the scroll container's coordinate space), then adding
     * the specified outsets.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline-start
     *
     * @var string
     */
    public const SCROLL_MARGIN_INLINE_START = 'scroll-margin-inline-start';

    /**
     * CSS property 'scroll-margin-left'
     *
     * The <scroll-margin-left> property defines the left margin of the scroll
     * snap area that is used for snapping this box to the snapport. The scroll
     * snap area is determined by taking the transformed border box, finding its
     * rectangular bounding box (axis-aligned in the scroll container's
     * coordinate space), then adding the specified outsets.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-left
     *
     * @var string
     */
    public const SCROLL_MARGIN_LEFT = 'scroll-margin-left';

    /**
     * CSS property 'scroll-margin-right'
     *
     * The <scroll-margin-right> property defines the right margin of the scroll
     * snap area that is used for snapping this box to the snapport. The scroll
     * snap area is determined by taking the transformed border box, finding its
     * rectangular bounding box (axis-aligned in the scroll container's
     * coordinate space), then adding the specified outsets.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-right
     *
     * @var string
     */
    public const SCROLL_MARGIN_RIGHT = 'scroll-margin-right';

    /**
     * CSS property 'scroll-margin-top'
     *
     * The <scroll-margin-top> property defines the top margin of the scroll
     * snap area that is used for snapping this box to the snapport. The scroll
     * snap area is determined by taking the transformed border box, finding its
     * rectangular bounding box (axis-aligned in the scroll container's
     * coordinate space), then adding the specified outsets.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-top
     *
     * @var string
     */
    public const SCROLL_MARGIN_TOP = 'scroll-margin-top';

    /**
     * CSS property 'scroll-padding'
     *
     * The <scroll-padding> shorthand property sets scroll padding on all sides
     * of an element at once, much like The <padding> property does for padding
     * on an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding
     *
     * @var string
     */
    public const SCROLL_PADDING = 'scroll-padding';

    /**
     * CSS property 'scroll-padding-block'
     *
     * The <scroll-padding-block> shorthand property sets the scroll padding of
     * an element in the block dimension.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block
     *
     * @var string
     */
    public const SCROLL_PADDING_BLOCK = 'scroll-padding-block';

    /**
     * CSS property 'scroll-padding-block-end'
     *
     * The <scroll-padding-block-end> property defines offsets for the end edge
     * in the block dimension of the optimal viewing region of the scrollport:
     * the region used as the target region for placing things in view of the
     * user. This allows the author to exclude regions of the scrollport that
     * are obscured by other content (such as fixed-positioned toolbars or
     * sidebars) or to put more breathing room between a targeted element and
     * the edges of the scrollport.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block-end
     *
     * @var string
     */
    public const SCROLL_PADDING_BLOCK_END = 'scroll-padding-block-end';

    /**
     * CSS property 'scroll-padding-block-start'
     *
     * The <scroll-padding-block-start> property defines offsets for the start
     * edge in the block dimension of the optimal viewing region of the
     * scrollport: the region used as the target region for placing things in
     * view of the user. This allows the author to exclude regions of the
     * scrollport that are obscured by other content (such as fixed-positioned
     * toolbars or sidebars) or to put more breathing room between a targeted
     * element and the edges of the scrollport.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block-start
     *
     * @var string
     */
    public const SCROLL_PADDING_BLOCK_START = 'scroll-padding-block-start';

    /**
     * CSS property 'scroll-padding-bottom'
     *
     * The <scroll-padding-bottom> property defines offsets for the bottom of
     * the optimal viewing region of the scrollport: the region used as the
     * target region for placing things in view of the user. This allows the
     * author to exclude regions of the scrollport that are obscured by other
     * content (such as fixed-positioned toolbars or sidebars) or to put more
     * breathing room between a targeted element and the edges of the
     * scrollport.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-bottom
     *
     * @var string
     */
    public const SCROLL_PADDING_BOTTOM = 'scroll-padding-bottom';

    /**
     * CSS property 'scroll-padding-inline'
     *
     * The <scroll-padding-inline> shorthand property sets the scroll padding of
     * an element in the inline dimension.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline
     *
     * @var string
     */
    public const SCROLL_PADDING_INLINE = 'scroll-padding-inline';

    /**
     * CSS property 'scroll-padding-inline-end'
     *
     * The <scroll-padding-inline-end> property defines offsets for the end edge
     * in the inline dimension of the optimal viewing region of the scrollport:
     * the region used as the target region for placing things in view of the
     * user. This allows the author to exclude regions of the scrollport that
     * are obscured by other content (such as fixed-positioned toolbars or
     * sidebars) or to put more breathing room between a targeted element and
     * the edges of the scrollport.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline-end
     *
     * @var string
     */
    public const SCROLL_PADDING_INLINE_END = 'scroll-padding-inline-end';

    /**
     * CSS property 'scroll-padding-inline-start'
     *
     * The <scroll-padding-inline-start> property defines offsets for the start
     * edge in the inline dimension of the optimal viewing region of the
     * scrollport: the region used as the target region for placing things in
     * view of the user. This allows the author to exclude regions of the
     * scrollport that are obscured by other content (such as fixed-positioned
     * toolbars or sidebars) or to put more breathing room between a targeted
     * element and the edges of the scrollport.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline-start
     *
     * @var string
     */
    public const SCROLL_PADDING_INLINE_START = 'scroll-padding-inline-start';

    /**
     * CSS property 'scroll-padding-left'
     *
     * The <scroll-padding-left> property defines offsets for the left of the
     * optimal viewing region of the scrollport: the region used as the target
     * region for placing things in view of the user. This allows the author to
     * exclude regions of the scrollport that are obscured by other content
     * (such as fixed-positioned toolbars or sidebars) or to put more breathing
     * room between a targeted element and the edges of the scrollport.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-left
     *
     * @var string
     */
    public const SCROLL_PADDING_LEFT = 'scroll-padding-left';

    /**
     * CSS property 'scroll-padding-right'
     *
     * The <scroll-padding-right> property defines offsets for the right of the
     * optimal viewing region of the scrollport: the region used as the target
     * region for placing things in view of the user. This allows the author to
     * exclude regions of the scrollport that are obscured by other content
     * (such as fixed-positioned toolbars or sidebars) or to put more breathing
     * room between a targeted element and the edges of the scrollport.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-right
     *
     * @var string
     */
    public const SCROLL_PADDING_RIGHT = 'scroll-padding-right';

    /**
     * CSS property 'scroll-padding-top'
     *
     * The <scroll-padding-top> property defines offsets for the top of the
     * optimal viewing region of the scrollport: the region used as the target
     * region for placing things in view of the user. This allows the author to
     * exclude regions of the scrollport that are obscured by other content
     * (such as fixed-positioned toolbars or sidebars) or to put more breathing
     * room between a targeted element and the edges of the scrollport.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-top
     *
     * @var string
     */
    public const SCROLL_PADDING_TOP = 'scroll-padding-top';

    /**
     * CSS property 'scroll-snap-align'
     *
     * The <scroll-snap-align> property specifies the box's snap position as an
     * alignment of its snap area (as the alignment subject) within its snap
     * container's snapport (as the alignment container). The two values specify
     * the snapping alignment in the block axis and inline axis, respectively.
     * If only one value is specified, the second value defaults to the same
     * value.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-align
     *
     * @var string
     */
    public const SCROLL_SNAP_ALIGN = 'scroll-snap-align';

    /**
     * CSS property 'scroll-snap-coordinate'
     *
     * The <scroll-snap-coordinate> property defines the x and y coordinate
     * positions within an element that will align with its nearest ancestor
     * scroll container's scroll-snap-destination for each respective axis.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-coordinate
     *
     * @var string
     * @deprecated
     */
    public const SCROLL_SNAP_COORDINATE = 'scroll-snap-coordinate';

    /**
     * CSS property 'scroll-snap-destination'
     *
     * The <scroll-snap-destination> property defines the position in x and y
     * coordinates within the scroll container's visual viewport which element
     * snap points align with.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-destination
     *
     * @var string
     * @deprecated
     */
    public const SCROLL_SNAP_DESTINATION = 'scroll-snap-destination';

    /**
     * CSS property 'scroll-snap-points-x'
     *
     * The <scroll-snap-points-x> property defines the horizontal positioning of
     * snap points within the content of the scroll container they are applied
     * to.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-points-x
     *
     * @var string
     * @deprecated
     */
    public const SCROLL_SNAP_POINTS_X = 'scroll-snap-points-x';

    /**
     * CSS property 'scroll-snap-points-y'
     *
     * The <scroll-snap-points-y> property defines the vertical positioning of
     * snap points within the content of the scroll container they are applied
     * to.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-points-y
     *
     * @var string
     * @deprecated
     */
    public const SCROLL_SNAP_POINTS_Y = 'scroll-snap-points-y';

    /**
     * CSS property 'scroll-snap-stop'
     *
     * The <scroll-snap-stop> property defines whether or not the scroll
     * container is allowed to "pass over" possible snap positions.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-stop
     *
     * @var string
     */
    public const SCROLL_SNAP_STOP = 'scroll-snap-stop';

    /**
     * CSS property 'scroll-snap-type'
     *
     * The <scroll-snap-type> property sets how strictly snap points are
     * enforced on the scroll container in case there is one.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type
     *
     * @var string
     */
    public const SCROLL_SNAP_TYPE = 'scroll-snap-type';

    /**
     * CSS property 'scrollbar-color'
     *
     * The <scrollbar-color> property sets the color of the scrollbar track and
     * thumb.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-color
     *
     * @var string
     */
    public const SCROLLBAR_COLOR = 'scrollbar-color';

    /**
     * CSS property 'scrollbar-gutter'
     *
     * The <scrollbar-gutter> property allows authors to reserve space for the
     * scrollbar, preventing unwanted layout changes as the content grows while
     * also avoiding unnecessary visuals when scrolling isn't needed.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-gutter
     *
     * @var string
     */
    public const SCROLLBAR_GUTTER = 'scrollbar-gutter';

    /**
     * CSS property 'scrollbar-width'
     *
     * The <scrollbar-width> property allows the author to set the maximum
     * thickness of an element's scrollbars when they are shown.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width
     *
     * @var string
     */
    public const SCROLLBAR_WIDTH = 'scrollbar-width';

    /**
     * CSS property 'shape-image-threshold'
     *
     * The <shape-image-threshold> property sets the alpha channel threshold
     * used to extract the shape using an image as the value for shape-outside.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/shape-image-threshold
     *
     * @var string
     */
    public const SHAPE_IMAGE_THRESHOLD = 'shape-image-threshold';

    /**
     * CSS property 'shape-margin'
     *
     * The <shape-margin> property sets a margin for a CSS shape created using
     * shape-outside.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/shape-margin
     *
     * @var string
     */
    public const SHAPE_MARGIN = 'shape-margin';

    /**
     * CSS property 'shape-outside'
     *
     * The <shape-outside> property defines a shape-which may be
     * non-rectangular-around which adjacent inline content should wrap. By
     * default, inline content wraps around its margin box; shape-outside
     * provides a way to customize this wrapping, making it possible to wrap
     * text around complex objects rather than simple boxes.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside
     *
     * @var string
     */
    public const SHAPE_OUTSIDE = 'shape-outside';

    /**
     * CSS property 'tab-size'
     *
     * The <tab-size> property is used to customize the width of tab characters
     * (U+0009).
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size
     *
     * @var string
     */
    public const TAB_SIZE = 'tab-size';

    /**
     * CSS property 'table-layout'
     *
     * The <table-layout> property sets the algorithm used to lay out <table>
     * cells, rows, and columns.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout
     *
     * @var string
     */
    public const TABLE_LAYOUT = 'table-layout';

    /**
     * CSS property 'text-align'
     *
     * The <text-align> property sets the horizontal alignment of the
     * inline-level content inside a block element or table-cell box. This means
     * it works like vertical-align but in the horizontal direction.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-align
     *
     * @var string
     */
    public const TEXT_ALIGN = 'text-align';

    /**
     * CSS property 'text-align-last'
     *
     * The <text-align-last> property sets how the last line of a block or a
     * line, right before a forced line break, is aligned.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-align-last
     *
     * @var string
     */
    public const TEXT_ALIGN_LAST = 'text-align-last';

    /**
     * CSS property 'text-combine-upright'
     *
     * The <text-combine-upright> property sets the combination of characters
     * into the space of a single character. If the combined text is wider than
     * 1em, the user agent must fit the contents within 1em. The resulting
     * composition is treated as a single upright glyph for layout and
     * decoration. This property only has an effect in vertical writing modes.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-combine-upright
     *
     * @var string
     */
    public const TEXT_COMBINE_UPRIGHT = 'text-combine-upright';

    /**
     * CSS property 'text-decoration'
     *
     * The <text-decoration> shorthand property sets the appearance of
     * decorative lines on text. It is a shorthand for text-decoration-line,
     * text-decoration-color, text-decoration-style, and the newer
     * text-decoration-thickness property.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration
     *
     * @var string
     */
    public const TEXT_DECORATION = 'text-decoration';

    /**
     * CSS property 'text-decoration-color'
     *
     * The <text-decoration-color> property sets the color of decorations added
     * to text by text-decoration-line.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color
     *
     * @var string
     */
    public const TEXT_DECORATION_COLOR = 'text-decoration-color';

    /**
     * CSS property 'text-decoration-line'
     *
     * The <text-decoration-line> property sets the kind of decoration that is
     * used on text in an element, such as an underline or overline.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line
     *
     * @var string
     */
    public const TEXT_DECORATION_LINE = 'text-decoration-line';

    /**
     * CSS property 'text-decoration-skip'
     *
     * The <text-decoration-skip> property sets what parts of an element's
     * content any text decoration affecting the element must skip over. It
     * controls all text decoration lines drawn by the element and also any text
     * decoration lines drawn by its ancestors. Note: Most other browsers are
     * converging on supporting the simpler text-decoration-skip-ink property.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip
     *
     * @var string
     */
    public const TEXT_DECORATION_SKIP = 'text-decoration-skip';

    /**
     * CSS property 'text-decoration-skip-ink'
     *
     * The <text-decoration-skip-ink> property specifies how overlines and
     * underlines are drawn when they pass over glyph ascenders and descenders.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip-ink
     *
     * @var string
     */
    public const TEXT_DECORATION_SKIP_INK = 'text-decoration-skip-ink';

    /**
     * CSS property 'text-decoration-style'
     *
     * The <text-decoration-style> property sets the style of the lines
     * specified by text-decoration-line. The style applies to all lines that
     * are set with text-decoration-line.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style
     *
     * @var string
     */
    public const TEXT_DECORATION_STYLE = 'text-decoration-style';

    /**
     * CSS property 'text-decoration-thickness'
     *
     * The <text-decoration-thickness> property sets the stroke thickness of the
     * decoration line that is used on text in an element, such as a
     * line-through, underline, or overline.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness
     *
     * @var string
     */
    public const TEXT_DECORATION_THICKNESS = 'text-decoration-thickness';

    /**
     * CSS property 'text-emphasis'
     *
     * The <text-emphasis> property applies emphasis marks to text (except
     * spaces and control characters). It is a shorthand for text-emphasis-style
     * and text-emphasis-color.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis
     *
     * @var string
     */
    public const TEXT_EMPHASIS = 'text-emphasis';

    /**
     * CSS property 'text-emphasis-color'
     *
     * The <text-emphasis-color> property sets the color of emphasis marks. This
     * value can also be set using the text-emphasis shorthand.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-color
     *
     * @var string
     */
    public const TEXT_EMPHASIS_COLOR = 'text-emphasis-color';

    /**
     * CSS property 'text-emphasis-position'
     *
     * The <text-emphasis-position> property sets where emphasis marks are
     * drawn. Like ruby text, if there isn't enough room for emphasis marks, the
     * line height is increased.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-position
     *
     * @var string
     */
    public const TEXT_EMPHASIS_POSITION = 'text-emphasis-position';

    /**
     * CSS property 'text-emphasis-style'
     *
     * The <text-emphasis-style> property sets the appearance of emphasis marks.
     * It can also be set, and reset, using the text-emphasis shorthand.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-style
     *
     * @var string
     */
    public const TEXT_EMPHASIS_STYLE = 'text-emphasis-style';

    /**
     * CSS property 'text-indent'
     *
     * The <text-indent> property sets the length of empty space (indentation)
     * that is put before lines of text in a block.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent
     *
     * @var string
     */
    public const TEXT_INDENT = 'text-indent';

    /**
     * CSS property 'text-justify'
     *
     * The <text-justify> property sets what type of justification should be
     * applied to text when text-align: justify; is set on an element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-justify
     *
     * @var string
     */
    public const TEXT_JUSTIFY = 'text-justify';

    /**
     * CSS property 'text-orientation'
     *
     * The <text-orientation> property sets the orientation of the text
     * characters in a line. It only affects text in vertical mode (when
     * writing-mode is not horizontal-tb). It is useful for controlling the
     * display of languages that use vertical script, and also for making
     * vertical table headers.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-orientation
     *
     * @var string
     */
    public const TEXT_ORIENTATION = 'text-orientation';

    /**
     * CSS property 'text-overflow'
     *
     * The <text-overflow> property sets how hidden overflow content is signaled
     * to users. It can be clipped, display an ellipsis ('…'), or display a
     * custom string.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow
     *
     * @var string
     */
    public const TEXT_OVERFLOW = 'text-overflow';

    /**
     * CSS property 'text-rendering'
     *
     * The <text-rendering> property provides information to the rendering
     * engine about what to optimize for when rendering text.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering
     *
     * @var string
     */
    public const TEXT_RENDERING = 'text-rendering';

    /**
     * CSS property 'text-shadow'
     *
     * The <text-shadow> property adds shadows to text. It accepts a
     * comma-separated list of shadows to be applied to the text and any of its
     * decorations. Each shadow is described by some combination of X and Y
     * offsets from the element, blur radius, and color.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow
     *
     * @var string
     */
    public const TEXT_SHADOW = 'text-shadow';

    /**
     * CSS property 'text-size-adjust'
     *
     * The <text-size-adjust> property controls the text inflation algorithm
     * used on some smartphones and tablets. Other browsers will ignore this
     * property.
     *
     * Status: Experimental
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust
     *
     * @var string
     */
    public const TEXT_SIZE_ADJUST = 'text-size-adjust';

    /**
     * CSS property 'text-transform'
     *
     * The <text-transform> property specifies how to capitalize an element's
     * text. It can be used to make text appear in all-uppercase or
     * all-lowercase, or with each word capitalized. It also can help improve
     * legibility for ruby.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform
     *
     * @var string
     */
    public const TEXT_TRANSFORM = 'text-transform';

    /**
     * CSS property 'text-underline-offset'
     *
     * The <text-underline-offset> property sets the offset distance of an
     * underline text decoration line (applied using text-decoration) from its
     * original position.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-underline-offset
     *
     * @var string
     */
    public const TEXT_UNDERLINE_OFFSET = 'text-underline-offset';

    /**
     * CSS property 'text-underline-position'
     *
     * The <text-underline-position> property specifies the position of the
     * underline which is set using The <text-decoration> property's underline
     * value.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-underline-position
     *
     * @var string
     */
    public const TEXT_UNDERLINE_POSITION = 'text-underline-position';

    /**
     * CSS property 'top'
     *
     * The <top> property participates in specifying the vertical position of a
     * positioned element. It has no effect on non-positioned elements.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/top
     *
     * @var string
     */
    public const TOP = 'top';

    /**
     * CSS property 'touch-action'
     *
     * The <touch-action> property sets how an element's region can be
     * manipulated by a touchscreen user (for example, by zooming features built
     * into the browser).
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action
     *
     * @var string
     */
    public const TOUCH_ACTION = 'touch-action';

    /**
     * CSS property 'transform'
     *
     * The <transform> property lets you rotate, scale, skew, or translate an
     * element. It modifies the coordinate space of the CSS visual formatting
     * model.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transform
     *
     * @var string
     */
    public const TRANSFORM = 'transform';

    /**
     * CSS property 'transform-box'
     *
     * The <transform-box> property defines the layout box to which the
     * transform and transform-origin properties relate.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box
     *
     * @var string
     */
    public const TRANSFORM_BOX = 'transform-box';

    /**
     * CSS property 'transform-origin'
     *
     * The <transform-origin> property sets the origin for an element's
     * transformations.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin
     *
     * @var string
     */
    public const TRANSFORM_ORIGIN = 'transform-origin';

    /**
     * CSS property 'transform-style'
     *
     * The <transform-style> property sets whether children of an element are
     * positioned in the 3D space or are flattened in the plane of the element.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style
     *
     * @var string
     */
    public const TRANSFORM_STYLE = 'transform-style';

    /**
     * CSS property 'transition'
     *
     * The <transition> property is a shorthand property for
     * transition-property, transition-duration, transition-timing-function, and
     * transition-delay.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transition
     *
     * @var string
     */
    public const TRANSITION = 'transition';

    /**
     * CSS property 'transition-delay'
     *
     * The <transition-delay> property specifies the duration to wait before
     * starting a property's transition effect when its value changes.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay
     *
     * @var string
     */
    public const TRANSITION_DELAY = 'transition-delay';

    /**
     * CSS property 'transition-duration'
     *
     * The <transition-duration> property sets the length of time a transition
     * animation should take to complete. By default, the value is 0s, meaning
     * that no animation will occur.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration
     *
     * @var string
     */
    public const TRANSITION_DURATION = 'transition-duration';

    /**
     * CSS property 'transition-property'
     *
     * The <transition-property> property sets the CSS properties to which a
     * transition effect should be applied.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property
     *
     * @var string
     */
    public const TRANSITION_PROPERTY = 'transition-property';

    /**
     * CSS property 'transition-timing-function'
     *
     * The <transition-timing-function> property sets how intermediate values
     * are calculated for CSS properties being affected by a transition effect.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function
     *
     * @var string
     */
    public const TRANSITION_TIMING_FUNCTION = 'transition-timing-function';

    /**
     * CSS property 'translate'
     *
     * The <translate> property allows you to specify translation transforms
     * individually and independently of The <transform> property. This maps
     * better to typical user interface usage, and saves having to remember the
     * exact order of transform functions to specify in the transform value.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/translate
     *
     * @var string
     */
    public const TRANSLATE = 'translate';

    /**
     * CSS property 'unicode-bidi'
     *
     * The <unicode-bidi> property, together with The <direction> property,
     * determines how bidirectional text in a document is handled. For example,
     * if a block of content contains both left-to-right and right-to-left text,
     * the user-agent uses a complex Unicode algorithm to decide how to display
     * the text. The <unicode-bidi> property overrides this algorithm and allows
     * the developer to control the text embedding.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/unicode-bidi
     *
     * @var string
     */
    public const UNICODE_BIDI = 'unicode-bidi';

    /**
     * CSS property 'user-select'
     *
     * The <user-select> property controls whether the user can select text.
     * This doesn't have any effect on content loaded as part of a browser's
     * user interface (its chrome), except in textboxes.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/user-select
     *
     * @var string
     */
    public const USER_SELECT = 'user-select';

    /**
     * CSS property 'vertical-align'
     *
     * The <vertical-align> property sets vertical alignment of an inline,
     * inline-block or table-cell box.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align
     *
     * @var string
     */
    public const VERTICAL_ALIGN = 'vertical-align';

    /**
     * CSS property 'visibility'
     *
     * The <visibility> property shows or hides an element without changing the
     * layout of a document. The property can also hide rows or columns in a
     * <table>.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/visibility
     *
     * @var string
     */
    public const VISIBILITY = 'visibility';

    /**
     * CSS property 'white-space'
     *
     * The <white-space> property sets how white space inside an element is
     * handled.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/white-space
     *
     * @var string
     */
    public const WHITE_SPACE = 'white-space';

    /**
     * CSS property 'widows'
     *
     * The <widows> property sets the minimum number of lines in a block
     * container that must be shown at the top of a page, region, or column.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/widows
     *
     * @var string
     */
    public const WIDOWS = 'widows';

    /**
     * CSS property 'width'
     *
     * The <width> property sets an element's width. By default, it sets the
     * width of the content area, but if box-sizing is set to border-box, it
     * sets the width of the border area.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/width
     *
     * @var string
     */
    public const WIDTH = 'width';

    /**
     * CSS property 'will-change'
     *
     * The <will-change> property hints to browsers how an element is expected
     * to change. Browsers may set up optimizations before an element is
     * actually changed. These kinds of optimizations can increase the
     * responsiveness of a page by doing potentially expensive work before they
     * are actually required. Warning: will-change is intended to be used as a
     * last resort, in order to try to deal with existing performance problems.
     * It should not be used to anticipate performance problems.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/will-change
     *
     * @var string
     */
    public const WILL_CHANGE = 'will-change';

    /**
     * CSS property 'word-break'
     *
     * The <word-break> property sets whether line breaks appear wherever the
     * text would otherwise overflow its content box.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/word-break
     *
     * @var string
     */
    public const WORD_BREAK = 'word-break';

    /**
     * CSS property 'word-spacing'
     *
     * The <word-spacing> property sets the length of space between words and
     * between tags.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing
     *
     * @var string
     */
    public const WORD_SPACING = 'word-spacing';

    /**
     * CSS property 'writing-mode'
     *
     * The <writing-mode> property sets whether lines of text are laid out
     * horizontally or vertically, as well as the direction in which blocks
     * progress. When set for an entire document, it should be set on the root
     * element (html element for HTML documents).
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode
     *
     * @var string
     */
    public const WRITING_MODE = 'writing-mode';

    /**
     * CSS property 'z-index'
     *
     * The <z-index> property sets the z-order of a positioned element and its
     * descendants or flex items. Overlapping elements with a larger z-index
     * cover those with a smaller one.
     *
     * Status: Official
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/z-index
     *
     * @var string
     */
    public const Z_INDEX = 'z-index';
}
